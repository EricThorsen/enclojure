/* The following code was generated by JFlex 1.4.3 on 11/1/09 5:52 PM */

/*
(comment
*
*    Copyright (c) ThorTech, L.L.C.. All rights reserved.
*    The use and distribution terms for this software are covered by the
*    Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
*    which can be found in the file epl-v10.html at the root of this distribution.
*    By using this software in any fashion, you are agreeing to be bound by
*    the terms of this license.
*    You must not remove this notice, or any other, from this software.
*
*    Author: Eric Thorsen
)
 */
package org.enclojure.flex;

import java.util.*;
import java.io.CharArrayReader;
import clojure.lang.Var;
import clojure.lang.RT;
import clojure.lang.IFn;
import clojure.lang.Var;
import clojure.lang.Keyword;
import clojure.lang.LispReader;
import clojure.lang.IPersistentMap;
import java.util.regex.Pattern;
import java.util.logging.*;
import java_cup.runtime.*;
import org.enclojure.flex.ClojureSymbol;
import Example.ClojureSym;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/1/09 5:52 PM from the specification file
 * <tt>/Users/ericthor/Dev/enclojure/src/ide-tools/src/org/enclojure/flex/clojure.flex</tt>
 */
public class _Lexer implements ClojureSym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int SYMBOL = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\1\1\0\1\3\1\1\22\0\1\2\1\47\1\45"+
    "\1\43\1\57\1\37\1\40\1\0\1\27\1\30\1\62\1\22\1\4"+
    "\1\22\1\25\1\26\1\23\2\6\1\6\1\6\2\6\1\6\2\6"+
    "\1\64\1\61\1\50\1\46\1\63\1\63\1\42\3\56\1\17\1\21"+
    "\1\11\1\7\1\57\1\15\2\57\1\13\13\57\1\24\2\57\1\31"+
    "\1\44\1\32\1\36\1\51\1\35\1\65\1\56\1\5\1\16\1\20"+
    "\1\10\1\7\1\57\1\14\2\57\1\12\1\57\1\53\1\67\1\70"+
    "\1\71\1\54\1\66\1\55\1\60\2\57\1\24\2\57\1\33\1\0"+
    "\1\34\1\41\43\0\4\52\4\0\1\52\12\0\1\52\4\0\1\52"+
    "\5\0\27\52\1\0\37\52\1\0\u013f\52\31\0\162\52\4\0\14\52"+
    "\16\0\5\52\11\0\1\52\213\0\1\52\13\0\1\52\1\0\3\52"+
    "\1\0\1\52\1\0\24\52\1\0\54\52\1\0\46\52\1\0\5\52"+
    "\4\0\202\52\10\0\105\52\1\0\46\52\2\0\2\52\6\0\20\52"+
    "\41\0\46\52\2\0\1\52\7\0\47\52\110\0\33\52\5\0\3\52"+
    "\56\0\32\52\5\0\13\52\43\0\2\52\1\0\143\52\1\0\1\52"+
    "\17\0\2\52\7\0\2\52\12\0\3\52\2\0\1\52\20\0\1\52"+
    "\1\0\36\52\35\0\3\52\60\0\46\52\13\0\1\52\u0152\0\66\52"+
    "\3\0\1\52\22\0\1\52\7\0\12\52\43\0\10\52\2\0\2\52"+
    "\2\0\26\52\1\0\7\52\1\0\1\52\3\0\4\52\3\0\1\52"+
    "\36\0\2\52\1\0\3\52\16\0\4\52\21\0\6\52\4\0\2\52"+
    "\2\0\26\52\1\0\7\52\1\0\2\52\1\0\2\52\1\0\2\52"+
    "\37\0\4\52\1\0\1\52\23\0\3\52\20\0\11\52\1\0\3\52"+
    "\1\0\26\52\1\0\7\52\1\0\2\52\1\0\5\52\3\0\1\52"+
    "\22\0\1\52\17\0\2\52\17\0\1\52\23\0\10\52\2\0\2\52"+
    "\2\0\26\52\1\0\7\52\1\0\2\52\1\0\5\52\3\0\1\52"+
    "\36\0\2\52\1\0\3\52\17\0\1\52\21\0\1\52\1\0\6\52"+
    "\3\0\3\52\1\0\4\52\3\0\2\52\1\0\1\52\1\0\2\52"+
    "\3\0\2\52\3\0\3\52\3\0\10\52\1\0\3\52\77\0\1\52"+
    "\13\0\10\52\1\0\3\52\1\0\27\52\1\0\12\52\1\0\5\52"+
    "\46\0\2\52\43\0\10\52\1\0\3\52\1\0\27\52\1\0\12\52"+
    "\1\0\5\52\3\0\1\52\40\0\1\52\1\0\2\52\43\0\10\52"+
    "\1\0\3\52\1\0\27\52\1\0\20\52\46\0\2\52\43\0\22\52"+
    "\3\0\30\52\1\0\11\52\1\0\1\52\2\0\7\52\72\0\60\52"+
    "\1\0\2\52\13\0\10\52\72\0\2\52\1\0\1\52\2\0\2\52"+
    "\1\0\1\52\2\0\1\52\6\0\4\52\1\0\7\52\1\0\3\52"+
    "\1\0\1\52\1\0\1\52\2\0\2\52\1\0\4\52\1\0\2\52"+
    "\11\0\1\52\2\0\5\52\1\0\1\52\25\0\2\52\42\0\1\52"+
    "\77\0\10\52\1\0\42\52\35\0\4\52\164\0\42\52\1\0\5\52"+
    "\1\0\2\52\45\0\6\52\112\0\46\52\12\0\51\52\7\0\132\52"+
    "\5\0\104\52\5\0\122\52\6\0\7\52\1\0\77\52\1\0\1\52"+
    "\1\0\4\52\2\0\7\52\1\0\1\52\1\0\4\52\2\0\47\52"+
    "\1\0\1\52\1\0\4\52\2\0\37\52\1\0\1\52\1\0\4\52"+
    "\2\0\7\52\1\0\1\52\1\0\4\52\2\0\7\52\1\0\7\52"+
    "\1\0\27\52\1\0\37\52\1\0\1\52\1\0\4\52\2\0\7\52"+
    "\1\0\47\52\1\0\23\52\105\0\125\52\14\0\u026c\52\2\0\10\52"+
    "\12\0\32\52\5\0\113\52\3\0\3\52\17\0\15\52\1\0\4\52"+
    "\16\0\22\52\16\0\22\52\16\0\15\52\1\0\3\52\17\0\64\52"+
    "\43\0\1\52\3\0\2\52\103\0\130\52\10\0\51\52\127\0\35\52"+
    "\63\0\36\52\2\0\5\52\u038b\0\154\52\224\0\234\52\4\0\132\52"+
    "\6\0\26\52\2\0\6\52\2\0\46\52\2\0\6\52\2\0\10\52"+
    "\1\0\1\52\1\0\1\52\1\0\1\52\1\0\37\52\2\0\65\52"+
    "\1\0\7\52\1\0\1\52\3\0\3\52\1\0\7\52\3\0\4\52"+
    "\2\0\6\52\4\0\15\52\5\0\3\52\1\0\7\52\102\0\2\52"+
    "\23\0\1\52\34\0\1\52\15\0\1\52\40\0\22\52\120\0\1\52"+
    "\4\0\1\52\2\0\12\52\1\0\1\52\3\0\5\52\6\0\1\52"+
    "\1\0\1\52\1\0\1\52\1\0\4\52\1\0\3\52\1\0\7\52"+
    "\3\0\3\52\5\0\5\52\26\0\44\52\u0e81\0\3\52\31\0\11\52"+
    "\7\0\5\52\2\0\5\52\4\0\126\52\6\0\3\52\1\0\137\52"+
    "\5\0\50\52\4\0\136\52\21\0\30\52\70\0\20\52\u0200\0\u19b6\52"+
    "\112\0\u51a6\52\132\0\u048d\52\u0773\0\u2ba4\52\u215c\0\u012e\52\2\0\73\52"+
    "\225\0\7\52\14\0\5\52\5\0\1\52\1\0\12\52\1\0\15\52"+
    "\1\0\5\52\1\0\1\52\1\0\2\52\1\0\2\52\1\0\154\52"+
    "\41\0\u016b\52\22\0\100\52\2\0\66\52\50\0\15\52\66\0\2\52"+
    "\30\0\3\52\31\0\1\52\6\0\5\52\1\0\207\52\7\0\1\52"+
    "\34\0\32\52\4\0\1\52\1\0\32\52\12\0\132\52\3\0\6\52"+
    "\2\0\6\52\2\0\6\52\2\0\3\52\3\0\2\52\3\0\2\52"+
    "\31\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\4\3\1\4\1\3"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\1\1\22\3\3"+
    "\1\23\1\1\1\3\1\24\1\5\1\25\1\26\1\27"+
    "\1\3\1\30\1\31\1\32\1\4\1\33\3\0\1\34"+
    "\3\3\1\35\1\3\1\36\1\0\1\5\2\16\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\2\51\1\0\1\52\1\3\1\53\2\3\1\54"+
    "\1\0\1\3\1\5\1\55\1\0\1\55\2\56\1\3"+
    "\1\57\1\3\1\60\1\4\1\5\1\61\2\3\1\54"+
    "\1\3\1\55\1\0\2\3\1\62\1\63\1\64\1\4"+
    "\1\3\1\65\1\3\1\56\1\66\1\67\1\70\1\71";

  private static int [] zzUnpackAction() {
    int [] result = new int[113];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\164\0\350\0\u0122\0\u015c"+
    "\0\u0196\0\u01d0\0\u020a\0\u0244\0\u027e\0\350\0\164\0\164"+
    "\0\164\0\164\0\164\0\164\0\164\0\164\0\u02b8\0\u02f2"+
    "\0\164\0\u032c\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488"+
    "\0\u04c2\0\u04fc\0\164\0\u0536\0\164\0\164\0\164\0\u0570"+
    "\0\164\0\164\0\164\0\164\0\164\0\u05aa\0\u05e4\0\u061e"+
    "\0\350\0\u0658\0\u0692\0\u06cc\0\350\0\u0706\0\350\0\u0740"+
    "\0\u077a\0\u07b4\0\164\0\164\0\164\0\164\0\164\0\164"+
    "\0\164\0\164\0\164\0\164\0\164\0\164\0\u07ee\0\u0828"+
    "\0\164\0\u0862\0\350\0\u089c\0\u08d6\0\u0910\0\u094a\0\u0984"+
    "\0\164\0\u09be\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a"+
    "\0\u0b54\0\u0b8e\0\u0bc8\0\u0570\0\350\0\u0c02\0\u0c3c\0\u0c76"+
    "\0\u0cb0\0\164\0\u0cea\0\u0d24\0\u0d5e\0\350\0\350\0\350"+
    "\0\u0d98\0\u0dd2\0\350\0\u0e0c\0\u0cea\0\350\0\350\0\350"+
    "\0\350";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[113];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\3\4\1\5\1\6\1\7\1\6\1\10\1\6"+
    "\1\11\1\6\1\12\1\6\1\13\4\6\1\14\1\6"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\6\1\30\1\31\1\32\1\33"+
    "\1\34\4\6\1\3\1\35\1\36\1\37\3\6\1\40"+
    "\2\6\1\41\4\6\1\42\5\43\20\44\1\45\1\46"+
    "\11\43\1\44\2\43\1\47\2\43\4\44\1\43\6\44"+
    "\1\43\10\44\73\0\3\4\73\0\20\6\1\16\1\6"+
    "\11\0\1\6\2\0\1\50\2\0\4\6\1\0\6\6"+
    "\1\0\2\6\1\0\5\6\6\0\1\7\1\51\2\52"+
    "\2\53\2\54\2\55\2\56\1\0\1\7\1\0\1\57"+
    "\1\60\50\0\20\6\1\16\1\6\11\0\1\6\2\0"+
    "\1\50\2\0\4\6\1\0\1\61\5\6\1\0\2\6"+
    "\1\0\1\62\4\6\5\0\13\6\1\63\4\6\1\16"+
    "\1\6\11\0\1\6\2\0\1\50\2\0\4\6\1\0"+
    "\6\6\1\0\2\6\1\0\2\6\1\64\2\6\5\0"+
    "\3\6\1\65\14\6\1\16\1\6\11\0\1\6\2\0"+
    "\1\50\2\0\4\6\1\0\6\6\1\0\2\6\1\0"+
    "\5\6\5\0\13\6\1\66\4\6\1\16\1\6\11\0"+
    "\1\6\2\0\1\50\2\0\4\6\1\0\6\6\1\0"+
    "\2\6\1\0\2\6\1\67\2\6\6\0\1\7\1\51"+
    "\2\52\2\53\2\54\2\55\2\56\1\0\1\7\1\70"+
    "\1\57\1\60\50\0\1\71\1\6\14\71\1\6\3\71"+
    "\11\0\1\71\2\0\1\50\2\0\4\71\1\0\6\71"+
    "\1\0\2\71\1\0\5\71\6\0\1\72\14\0\1\72"+
    "\14\0\1\73\73\0\1\74\56\0\1\75\3\0\1\76"+
    "\2\0\1\77\5\0\1\100\1\101\1\102\1\103\1\104"+
    "\1\105\20\0\1\106\2\0\2\106\1\107\1\106\13\107"+
    "\2\106\1\107\24\106\10\107\4\106\5\107\44\34\1\110"+
    "\1\111\24\34\5\0\7\6\1\112\10\6\1\16\1\6"+
    "\11\0\1\6\2\0\1\50\2\0\4\6\1\0\6\6"+
    "\1\0\2\6\1\0\1\6\1\113\3\6\5\0\13\6"+
    "\1\114\4\6\1\16\1\6\11\0\1\6\2\0\1\50"+
    "\2\0\4\6\1\0\6\6\1\0\2\6\1\0\5\6"+
    "\5\0\20\6\1\16\1\6\11\0\1\6\2\0\1\50"+
    "\2\0\4\6\1\0\1\6\1\115\4\6\1\0\2\6"+
    "\1\0\5\6\1\40\1\0\70\40\5\0\1\116\1\0"+
    "\14\116\1\0\3\116\11\0\1\116\5\0\4\116\1\0"+
    "\6\116\1\0\2\116\1\117\5\116\5\0\20\6\1\16"+
    "\1\6\11\0\1\6\2\0\1\50\2\0\4\6\1\0"+
    "\5\6\1\120\1\0\2\6\1\0\5\6\5\0\20\44"+
    "\13\0\1\44\2\0\1\47\2\0\4\44\1\0\6\44"+
    "\1\0\10\44\25\0\1\121\52\0\1\122\13\0\1\123"+
    "\1\122\54\0\1\124\14\0\1\124\54\0\1\125\14\0"+
    "\1\126\53\0\5\6\1\127\12\6\1\16\1\6\11\0"+
    "\1\6\2\0\1\50\2\0\4\6\1\0\6\6\1\0"+
    "\2\6\1\0\5\6\5\0\20\6\1\16\1\6\11\0"+
    "\1\6\2\0\1\50\2\0\4\6\1\0\2\6\1\130"+
    "\3\6\1\0\2\6\1\0\5\6\5\0\20\6\1\16"+
    "\1\6\11\0\1\6\2\0\1\50\2\0\4\6\1\0"+
    "\6\6\1\0\2\6\1\0\2\6\1\131\2\6\5\0"+
    "\3\6\1\132\14\6\1\16\1\6\11\0\1\6\2\0"+
    "\1\50\2\0\4\6\1\0\6\6\1\0\2\6\1\0"+
    "\5\6\5\0\2\133\1\0\2\133\4\0\4\133\1\0"+
    "\1\133\32\0\1\133\6\0\1\133\11\0\22\71\11\0"+
    "\1\71\2\0\1\134\2\0\4\71\1\0\6\71\1\0"+
    "\2\71\1\0\5\71\6\0\1\72\14\0\1\72\53\0"+
    "\1\107\1\0\13\107\2\0\1\107\24\0\10\107\4\0"+
    "\5\107\2\34\1\0\67\34\5\0\5\6\1\135\12\6"+
    "\1\16\1\6\11\0\1\6\2\0\1\50\2\0\4\6"+
    "\1\0\6\6\1\0\2\6\1\0\5\6\5\0\1\136"+
    "\17\6\1\16\1\6\11\0\1\6\2\0\1\50\2\0"+
    "\4\6\1\0\6\6\1\0\2\6\1\0\5\6\5\0"+
    "\20\6\1\16\1\6\11\0\1\6\2\0\1\50\2\0"+
    "\4\6\1\0\5\6\1\137\1\0\2\6\1\0\5\6"+
    "\5\0\22\116\11\0\1\116\2\0\1\140\2\0\4\116"+
    "\1\0\6\116\1\0\2\116\1\117\5\116\5\0\1\116"+
    "\1\0\14\116\1\0\3\116\11\0\1\116\5\0\4\116"+
    "\1\0\6\116\1\0\2\116\1\0\5\116\5\0\20\6"+
    "\1\16\1\6\11\0\1\6\2\0\1\50\2\0\4\6"+
    "\1\0\6\6\1\0\2\6\1\0\2\6\1\141\2\6"+
    "\6\0\1\122\1\142\2\52\4\0\2\55\3\0\1\122"+
    "\54\0\1\122\14\0\1\122\54\0\1\124\1\142\2\52"+
    "\4\0\2\55\2\56\1\0\1\124\54\0\1\125\14\0"+
    "\1\125\54\0\1\125\14\0\1\125\1\143\52\0\20\6"+
    "\1\16\1\6\11\0\1\6\2\0\1\50\2\0\4\6"+
    "\1\0\6\6\1\0\2\6\1\0\1\6\1\144\3\6"+
    "\5\0\3\6\1\145\14\6\1\16\1\6\11\0\1\6"+
    "\2\0\1\50\2\0\4\6\1\0\6\6\1\0\1\146"+
    "\1\6\1\0\5\6\5\0\20\6\1\16\1\6\11\0"+
    "\1\6\2\0\1\50\2\0\4\6\1\0\6\6\1\0"+
    "\2\6\1\0\3\6\1\147\1\6\5\0\20\6\1\16"+
    "\1\6\11\0\1\6\2\0\1\50\2\0\4\6\1\0"+
    "\1\150\5\6\1\0\2\6\1\0\5\6\5\0\2\133"+
    "\1\51\2\133\2\53\2\54\2\133\2\151\1\0\1\133"+
    "\1\0\1\57\1\60\27\0\1\133\6\0\1\133\11\0"+
    "\20\6\1\16\1\6\11\0\1\6\2\0\1\50\2\0"+
    "\4\6\1\0\5\6\1\152\1\0\2\6\1\0\5\6"+
    "\5\0\13\6\1\153\4\6\1\16\1\6\11\0\1\6"+
    "\2\0\1\50\2\0\4\6\1\0\6\6\1\0\2\6"+
    "\1\0\5\6\64\0\1\117\12\0\20\6\1\16\1\6"+
    "\11\0\1\6\2\0\1\50\2\0\4\6\1\0\2\6"+
    "\1\154\3\6\1\0\2\6\1\0\5\6\5\0\2\155"+
    "\1\0\2\155\4\0\4\155\1\0\1\155\32\0\1\155"+
    "\6\0\1\155\11\0\13\6\1\156\4\6\1\16\1\6"+
    "\11\0\1\6\2\0\1\50\2\0\4\6\1\0\6\6"+
    "\1\0\2\6\1\0\5\6\5\0\20\6\1\16\1\6"+
    "\11\0\1\6\2\0\1\50\2\0\4\6\1\0\1\157"+
    "\5\6\1\0\2\6\1\0\5\6\5\0\2\133\1\51"+
    "\2\133\2\53\2\54\2\133\2\151\1\123\1\133\1\0"+
    "\1\57\1\60\27\0\1\133\6\0\1\133\11\0\20\6"+
    "\1\16\1\6\11\0\1\6\2\0\1\50\2\0\4\6"+
    "\1\0\1\6\1\160\4\6\1\0\2\6\1\0\5\6"+
    "\5\0\13\6\1\161\4\6\1\16\1\6\11\0\1\6"+
    "\2\0\1\50\2\0\4\6\1\0\6\6\1\0\2\6"+
    "\1\0\5\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3654];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\11\1\10\11\2\1\1\11"+
    "\11\1\1\11\1\1\3\11\1\1\5\11\3\0\7\1"+
    "\1\0\2\1\14\11\1\1\1\0\1\11\5\1\1\0"+
    "\1\1\1\11\1\1\1\0\16\1\1\11\1\0\16\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[113];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

final Var requireFn = RT.var("clojure.core","require");
final ComplexSymbolFactory symFactory = new ComplexSymbolFactory();
public final static Var _tokenMap = (Var)RT.var("org.enclojure.idetools.tokens","-TOKENS-");

public  java_cup.runtime.Symbol symbol(int ID,String tokenType,Object data)
{
    return symFactory.newSymbol(tokenType,ID,data);
}

public java_cup.runtime.Symbol symbol(int ID,String tokenType)
{
    return symFactory.newSymbol(tokenType,ID,tokenType);
}

/*
public ClojureSymbol symbol(Var tokenType,Object data)
{
    return ClojureSymbol.create((IPersistentMap)tokenType.get(),yyline, yycolumn,yychar,data);
}

public ClojureSymbol symbol(Var tokenType)
{
    return ClojureSymbol.create((IPersistentMap)tokenType.get(),yyline, yycolumn,yychar);
}
*/





  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _Lexer(java.io.Reader in) {
      try {
        requireFn.invoke(clojure.lang.Symbol.create("org.enclojure.idetools.tokens"));
        requireFn.invoke(clojure.lang.Symbol.create("org.enclojure.idetools.token-set"));
    } catch (Exception ex) {
            Logger.getLogger("org.enclojure.flex._Lexer").log(Level.SEVERE, null, ex);
        }
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1322) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 42: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [271] { return symbol(STRING_LITERAL,yytext()); }");
          { return symbol(STRING_LITERAL,yytext());
          }
        case 58: break;
        case 24: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [281] { return symbol(BIG_INT_LITERAL,yytext()); }");
          { return symbol(BIG_INT_LITERAL,yytext());
          }
        case 59: break;
        case 13: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [319] { return symbol(HAT,yytext()); }");
          { return symbol(HAT,yytext());
          }
        case 60: break;
        case 55: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [298] { return symbol(mLETFN,yytext()); }");
          { return symbol(mLETFN,yytext());
          }
        case 61: break;
        case 56: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [292] { return symbol(mRECUR,yytext()); }");
          { return symbol(mRECUR,yytext());
          }
        case 62: break;
        case 40: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [317] { return symbol(DISP_DISCARD_FORM,yytext()); }");
          { return symbol(DISP_DISCARD_FORM,yytext());
          }
        case 63: break;
        case 7: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [327] { return symbol(RIGHT_PAREN,yytext()); }");
          { return symbol(RIGHT_PAREN,yytext());
          }
        case 64: break;
        case 47: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [296] { return symbol(mLET,yytext()); }");
          { return symbol(mLET,yytext());
          }
        case 65: break;
        case 29: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [294] { return symbol(mIF,yytext()); }");
          { return symbol(mIF,yytext());
          }
        case 66: break;
        case 45: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [284] { return symbol(BIG_DECIMAL_LITERAL,yytext()); }");
          { return symbol(BIG_DECIMAL_LITERAL,yytext());
          }
        case 67: break;
        case 17: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [318] { return symbol(DISPATCH,yytext()); }");
          { return symbol(DISPATCH,yytext());
          }
        case 68: break;
        case 22: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [258] { return symbol(symNS_SEP,yytext()); }");
          { return symbol(symNS_SEP,yytext());
          }
        case 69: break;
        case 14: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [320] { return symbol(symIMPLICIT_ARG,yytext()); }");
          { return symbol(symIMPLICIT_ARG,yytext());
          }
        case 70: break;
        case 19: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [266] { return symbol(LINE_COMMENT,yytext()); }");
          { return symbol(LINE_COMMENT,yytext());
          }
        case 71: break;
        case 12: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [308] { return symbol(BACKQUOTE,yytext()); }");
          { return symbol(BACKQUOTE,yytext());
          }
        case 72: break;
        case 6: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [326] { return symbol(LEFT_PAREN,yytext()); }");
          { return symbol(LEFT_PAREN,yytext());
          }
        case 73: break;
        case 28: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [290] { return symbol(mFN,yytext()); }");
          { return symbol(mFN,yytext());
          }
        case 74: break;
        case 53: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [276] { return symbol(TRUE,yytext()); }");
          { return symbol(TRUE,yytext());
          }
        case 75: break;
        case 16: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [322] { return symbol(AT,yytext()); }");
          { return symbol(AT,yytext());
          }
        case 76: break;
        case 1: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [336] { return symbol(BAD_CHARACTER,yytext()); }");
          { return symbol(BAD_CHARACTER,yytext());
          }
        case 77: break;
        case 31: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [323] { return symbol(TILDAAT,yytext()); }");
          { return symbol(TILDAAT,yytext());
          }
        case 78: break;
        case 50: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [297] { return symbol(mLET_STAR,yytext()); }");
          { return symbol(mLET_STAR,yytext());
          }
        case 79: break;
        case 21: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [257] { return symbol(symDOT,yytext()); }");
          { return symbol(symDOT,yytext());
          }
        case 80: break;
        case 20: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [261] { yypushback(yytext().length()); yybegin(YYINITIAL); }");
          { yypushback(yytext().length()); yybegin(YYINITIAL);
          }
        case 81: break;
        case 51: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [291] { return symbol(mLOOP,yytext()); }");
          { return symbol(mLOOP,yytext());
          }
        case 82: break;
        case 27: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [283] { return symbol(DOUBLE_LITERAL,yytext()); }");
          { return symbol(DOUBLE_LITERAL,yytext());
          }
        case 83: break;
        case 30: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [293] { return symbol(mDO,yytext()); }");
          { return symbol(mDO,yytext());
          }
        case 84: break;
        case 4: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [279] { return symbol(INTEGER_LITERAL,yytext()); }");
          { return symbol(INTEGER_LITERAL,yytext());
          }
        case 85: break;
        case 5: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [302] { return symbol(symATOM,yytext()); }");
          { return symbol(symATOM,yytext());
          }
        case 86: break;
        case 26: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [280] { return symbol(LONG_LITERAL,yytext()); }");
          { return symbol(LONG_LITERAL,yytext());
          }
        case 87: break;
        case 32: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [312] { return symbol(DISP_FN,yytext()); }");
          { return symbol(DISP_FN,yytext());
          }
        case 88: break;
        case 18: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [272] { return symbol(WRONG_STRING_LITERAL,yytext()); }");
          { return symbol(WRONG_STRING_LITERAL,yytext());
          }
        case 89: break;
        case 15: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [321] { return symbol(TILDA,yytext()); }");
          { return symbol(TILDA,yytext());
          }
        case 90: break;
        case 43: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [295] { return symbol(mNS,yytext()); }");
          { return symbol(mNS,yytext());
          }
        case 91: break;
        case 41: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [274] { return symbol(CHAR_LITERAL,yytext()); }");
          { return symbol(CHAR_LITERAL,yytext());
          }
        case 92: break;
        case 46: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [285] { return symbol(RATIO,yytext()); }");
          { return symbol(RATIO,yytext());
          }
        case 93: break;
        case 11: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [331] { return symbol(RIGHT_CURLY,yytext()); }");
          { return symbol(RIGHT_CURLY,yytext());
          }
        case 94: break;
        case 25: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [282] { return symbol(FLOAT_LITERAL,yytext()); }");
          { return symbol(FLOAT_LITERAL,yytext());
          }
        case 95: break;
        case 34: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [309] { return symbol(DISP_META,yytext()); }");
          { return symbol(DISP_META,yytext());
          }
        case 96: break;
        case 48: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [288] { return symbol(mDEF,yytext()); }");
          { return symbol(mDEF,yytext());
          }
        case 97: break;
        case 9: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [329] { return symbol(RIGHT_SQUARE,yytext()); }");
          { return symbol(RIGHT_SQUARE,yytext());
          }
        case 98: break;
        case 49: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [275] { return symbol(NIL,yytext()); }");
          { return symbol(NIL,yytext());
          }
        case 99: break;
        case 38: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [315] { return symbol(DISP_COMMENT,yytext()); }");
          { return symbol(DISP_COMMENT,yytext());
          }
        case 100: break;
        case 33: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [313] { return symbol(DISP_SET,yytext()); }");
          { return symbol(DISP_SET,yytext());
          }
        case 101: break;
        case 39: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [316] { return symbol(DISP_UNREADABLE,yytext()); }");
          { return symbol(DISP_UNREADABLE,yytext());
          }
        case 102: break;
        case 52: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [289] { return symbol(mDEFN,yytext()); }");
          { return symbol(mDEFN,yytext());
          }
        case 103: break;
        case 37: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [314] { return symbol(DISP_EVAL,yytext()); }");
          { return symbol(DISP_EVAL,yytext());
          }
        case 104: break;
        case 44: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [305] { return symbol(KEYWORD,yytext()); }");
          { return symbol(KEYWORD,yytext());
          }
        case 105: break;
        case 10: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [330] { return symbol(LEFT_CURLY,yytext()); }");
          { return symbol(LEFT_CURLY,yytext());
          }
        case 106: break;
        case 54: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [277] { return symbol(FALSE,yytext()); }");
          { return symbol(FALSE,yytext());
          }
        case 107: break;
        case 23: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [260] { yybegin(YYINITIAL); return symbol(symATOM,yytext()); }");
          { yybegin(YYINITIAL); return symbol(symATOM,yytext());
          }
        case 108: break;
        case 36: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [311] { return symbol(DISP_REGEX,yytext()); }");
          { return symbol(DISP_REGEX,yytext());
          }
        case 109: break;
        case 57: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [299] { return symbol(mQUOTE,yytext()); }");
          { return symbol(mQUOTE,yytext());
          }
        case 110: break;
        case 8: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [328] { return symbol(LEFT_SQUARE,yytext()); }");
          { return symbol(LEFT_SQUARE,yytext());
          }
        case 111: break;
        case 3: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [304] { yypushback(yytext().length()); yybegin(SYMBOL); }");
          { yypushback(yytext().length()); yybegin(SYMBOL);
          }
        case 112: break;
        case 35: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [310] { return symbol(DISP_VAR,yytext()); }");
          { return symbol(DISP_VAR,yytext());
          }
        case 113: break;
        case 2: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [268] {  }");
          { 
          }
        case 114: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {     return new java_cup.runtime.Symbol(ClojureSym.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java _Lexer <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        _Lexer scanner = null;
        try {
          scanner = new _Lexer( new java.io.FileReader(argv[i]) );
          do {
            System.out.println(scanner.next_token());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
