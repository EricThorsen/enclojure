package Example;

import java_cup.runtime.*;
import org.enclojure.flex._Lexer;
import java.io.*;
import org.enclojure.flex.*;

parser code {:
	public static void main(String args[]) throws Exception {
		if (args.length==0) 
		{
		new ClojureParser(new _Lexer(System.in)).parse();
		}
		else
		{ 
		new ClojureParser(new _Lexer(new java.io.FileInputStream(args[0]))).parse();
		}
	}
:}

terminal NEWLINE
		,WHITESPACE
		,COMMA
		,HEX_DIGIT
		,DIGIT
		,BIG_SUFFIX
		,FLOAT_SUFFIX
		,LONG_SUFFIX
		,INT_SUFFIX
		,DOUBLE_SUFFIX
		,EXPONENT
		,NUM_INT_PART
		,NUM_INT
		,NUM_LONG
		,NUM_BIG_INT
		,NUM_FLOAT
		,NUM_DOUBLE
		,NUM_BIG_DECIMAL
		,LEFT_PAREN 
		,RIGHT_PAREN
		,LEFT_SQUARE
		,RIGHT_SQUARE
		,LEFT_CURLY
		,RIGHT_CURLY
		,QUOTE
		,BACKQUOTE
		,SHARP
		,SHARP_HAT
		,HAT
		,IMPLICIT_ARG
		,TILDA
		,AT
		,TILDAAT
		,ONE_NL
		,CHAR
		,STRING_ESC
		,STRING_CONTENT
		,STRING
		,WRONG_STRING
		,LINE_COMMENT
		,LETTER
		,SLASH_LETTER
		,OTHER
		,NoDigit
		,OTHER_REDUCED
		,NoDigit1
		,IDENT
		,KEYWORD
		,NIL
		,TRUE
		,FALSE
		,BAD_CHARACTER
		,COLON
                ,SYMBOL
		,symDOT
		,symNS_SEP
		,symATOM
		,symIMPLICIT_ARG
		;

terminal INTEGER_LITERAL;
terminal BIG_INT_LITERAL;
terminal LONG_LITERAL;
terminal FLOAT_LITERAL;
terminal DOUBLE_LITERAL;
terminal BIG_DECIMAL_LITERAL;
terminal RATIO;
terminal CHAR_LITERAL;
terminal STRING_LITERAL;
terminal WRONG_STRING_LITERAL;
terminal NULL_LITERAL;

non terminal s_expr, map,vector,set,list,empty_list;
non terminal literal,series,empty,list_expr,pair_expr,expr_part;

start with s_expr;	   
	
s_expr ::= expr_part;

expr_part ::= literal 
        |  list | vector | map | set;

list    ::=  LEFT_PAREN s_expr RIGHT_PAREN;
empty_list ::= LEFT_PAREN RIGHT_PAREN;
list_expr ::= empty_list | list;

vector  ::= LEFT_SQUARE s_expr:e RIGHT_SQUARE
        {: System.out.println("vector [" + e +"]"); :}
        ;

set     ::= SHARP LEFT_CURLY s_expr:e RIGHT_CURLY
        {: System.out.println("set #{" + e +"}"); :}
        ;

map     ::= LEFT_CURLY pair_expr:e RIGHT_CURLY
        {: System.out.println("map {" + e +"}"); :}
        ;

pair_expr ::= s_expr s_expr;

literal ::= 
           INTEGER_LITERAL
	|  BIG_INT_LITERAL
	|  LONG_LITERAL
	|  FLOAT_LITERAL
	|  DOUBLE_LITERAL
	|  BIG_DECIMAL_LITERAL
	|  RATIO
	|  CHAR_LITERAL
	|  STRING_LITERAL
	|  WRONG_STRING_LITERAL
	|  KEYWORD        
	|  NULL_LITERAL
	;

empty ::= /* empty */
    ;

