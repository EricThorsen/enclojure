
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Oct 30 22:52:20 EDT 2009
//----------------------------------------------------

package Example;

import java_cup.runtime.*;
import org.enclojure.flex._Lexer;
import java.io.*;
import org.enclojure.flex.*;
import clojure.lang.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Oct 30 22:52:20 EDT 2009
  */
public class ClojureParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ClojureParser() {super();}

  /** Constructor which sets the default scanner. */
  public ClojureParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ClojureParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\050\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\017\003\000" +
    "\002\016\004\000\002\016\003\000\002\007\005\000\002" +
    "\005\005\000\002\006\005\000\002\004\006\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\023\003\000\002\022" +
    "\005\000\002\022\003\000\002\021\005\000\002\021\003" +
    "\000\002\024\004\000\002\024\004\000\002\020\004\000" +
    "\002\020\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\014\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\066\000\046\026\007\030\025\032\010\035\013\041" +
    "\035\074\021\105\005\107\030\110\036\111\041\112\033" +
    "\113\043\114\020\115\034\116\024\117\015\120\040\121" +
    "\042\001\002\000\050\002\ufffe\026\ufffe\030\ufffe\032\ufffe" +
    "\035\ufffe\041\ufffe\074\ufffe\105\ufffe\107\ufffe\110\ufffe\111" +
    "\ufffe\112\ufffe\113\ufffe\114\ufffe\115\ufffe\116\ufffe\117\ufffe" +
    "\120\ufffe\121\ufffe\001\002\000\062\002\uffe6\026\uffe6\027" +
    "\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\035\uffe6\041\uffe6" +
    "\074\uffe6\103\uffe6\104\uffe6\105\uffe6\107\uffe6\110\uffe6\111" +
    "\uffe6\112\uffe6\113\uffe6\114\uffe6\115\uffe6\116\uffe6\117\uffe6" +
    "\120\uffe6\121\uffe6\001\002\000\056\002\ufffc\026\ufffc\027" +
    "\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc\035\ufffc\041\ufffc" +
    "\074\ufffc\105\ufffc\107\ufffc\110\ufffc\111\ufffc\112\ufffc\113" +
    "\ufffc\114\ufffc\115\ufffc\116\ufffc\117\ufffc\120\ufffc\121\ufffc" +
    "\001\002\000\046\026\007\030\025\032\010\035\013\041" +
    "\035\074\021\105\005\107\030\110\036\111\041\112\033" +
    "\113\043\114\020\115\034\116\024\117\015\120\040\121" +
    "\042\001\002\000\046\026\007\030\025\032\010\035\013" +
    "\041\035\074\021\105\005\107\030\110\036\111\041\112" +
    "\033\113\043\114\020\115\034\116\024\117\015\120\040" +
    "\121\042\001\002\000\056\002\uffde\026\uffde\027\uffde\030" +
    "\uffde\031\uffde\032\uffde\033\uffde\035\uffde\041\uffde\074\uffde" +
    "\105\uffde\107\uffde\110\uffde\111\uffde\112\uffde\113\uffde\114" +
    "\uffde\115\uffde\116\uffde\117\uffde\120\uffde\121\uffde\001\002" +
    "\000\056\002\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032" +
    "\uffdd\033\uffdd\035\uffdd\041\uffdd\074\uffdd\105\uffdd\107\uffdd" +
    "\110\uffdd\111\uffdd\112\uffdd\113\uffdd\114\uffdd\115\uffdd\116" +
    "\uffdd\117\uffdd\120\uffdd\121\uffdd\001\002\000\006\105\005" +
    "\117\063\001\002\000\062\002\uffe4\026\uffe4\027\uffe4\030" +
    "\uffe4\031\uffe4\032\uffe4\033\uffe4\035\uffe4\041\uffe4\074\uffe4" +
    "\103\uffe4\104\uffe4\105\uffe4\107\uffe4\110\uffe4\111\uffe4\112" +
    "\uffe4\113\uffe4\114\uffe4\115\uffe4\116\uffe4\117\uffe4\120\uffe4" +
    "\121\uffe4\001\002\000\056\002\uffea\026\uffea\027\uffea\030" +
    "\uffea\031\uffea\032\uffea\033\uffea\035\uffea\041\uffea\074\uffea" +
    "\105\uffea\107\uffea\110\uffea\111\uffea\112\uffea\113\uffea\114" +
    "\uffea\115\uffea\116\uffea\117\uffea\120\uffea\121\uffea\001\002" +
    "\000\062\002\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032" +
    "\uffe2\033\uffe2\035\uffe2\041\uffe2\074\uffe2\103\057\104\056" +
    "\105\uffe2\107\uffe2\110\uffe2\111\uffe2\112\uffe2\113\uffe2\114" +
    "\uffe2\115\uffe2\116\uffe2\117\uffe2\120\uffe2\121\uffe2\001\002" +
    "\000\004\105\005\001\002\000\056\002\uffed\026\uffed\027" +
    "\uffed\030\uffed\031\uffed\032\uffed\033\uffed\035\uffed\041\uffed" +
    "\074\uffed\105\uffed\107\uffed\110\uffed\111\uffed\112\uffed\113" +
    "\uffed\114\uffed\115\uffed\116\uffed\117\uffed\120\uffed\121\uffed" +
    "\001\002\000\056\002\uffe8\026\uffe8\027\uffe8\030\uffe8\031" +
    "\uffe8\032\uffe8\033\uffe8\035\uffe8\041\uffe8\074\uffe8\105\uffe8" +
    "\107\uffe8\110\uffe8\111\uffe8\112\uffe8\113\uffe8\114\uffe8\115" +
    "\uffe8\116\uffe8\117\uffe8\120\uffe8\121\uffe8\001\002\000\056" +
    "\002\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033" +
    "\ufffa\035\ufffa\041\ufffa\074\ufffa\105\ufffa\107\ufffa\110\ufffa" +
    "\111\ufffa\112\ufffa\113\ufffa\114\ufffa\115\ufffa\116\ufffa\117" +
    "\ufffa\120\ufffa\121\ufffa\001\002\000\050\002\000\026\007" +
    "\030\025\032\010\035\013\041\035\074\021\105\005\107" +
    "\030\110\036\111\041\112\033\113\043\114\020\115\034" +
    "\116\024\117\015\120\040\121\042\001\002\000\056\002" +
    "\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb" +
    "\035\uffeb\041\uffeb\074\uffeb\105\uffeb\107\uffeb\110\uffeb\111" +
    "\uffeb\112\uffeb\113\uffeb\114\uffeb\115\uffeb\116\uffeb\117\uffeb" +
    "\120\uffeb\121\uffeb\001\002\000\046\026\007\030\025\032" +
    "\010\035\013\041\035\074\021\105\005\107\030\110\036" +
    "\111\041\112\033\113\043\114\020\115\034\116\024\117" +
    "\015\120\040\121\042\001\002\000\056\002\uffdb\026\uffdb" +
    "\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\035\uffdb\041" +
    "\uffdb\074\uffdb\105\uffdb\107\uffdb\110\uffdb\111\uffdb\112\uffdb" +
    "\113\uffdb\114\uffdb\115\uffdb\116\uffdb\117\uffdb\120\uffdb\121" +
    "\uffdb\001\002\000\056\002\uffdc\026\uffdc\027\uffdc\030\uffdc" +
    "\031\uffdc\032\uffdc\033\uffdc\035\uffdc\041\uffdc\074\uffdc\105" +
    "\uffdc\107\uffdc\110\uffdc\111\uffdc\112\uffdc\113\uffdc\114\uffdc" +
    "\115\uffdc\116\uffdc\117\uffdc\120\uffdc\121\uffdc\001\002\000" +
    "\056\002\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2" +
    "\033\ufff2\035\ufff2\041\ufff2\074\ufff2\105\ufff2\107\ufff2\110" +
    "\ufff2\111\ufff2\112\ufff2\113\ufff2\114\ufff2\115\ufff2\116\ufff2" +
    "\117\ufff2\120\ufff2\121\ufff2\001\002\000\056\002\ufffd\026" +
    "\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd\035\ufffd" +
    "\041\ufffd\074\ufffd\105\ufffd\107\ufffd\110\ufffd\111\ufffd\112" +
    "\ufffd\113\ufffd\114\ufffd\115\ufffd\116\ufffd\117\ufffd\120\ufffd" +
    "\121\ufffd\001\002\000\004\002\051\001\002\000\056\002" +
    "\uffef\026\uffef\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef" +
    "\035\uffef\041\uffef\074\uffef\105\uffef\107\uffef\110\uffef\111" +
    "\uffef\112\uffef\113\uffef\114\uffef\115\uffef\116\uffef\117\uffef" +
    "\120\uffef\121\uffef\001\002\000\056\002\uffec\026\uffec\027" +
    "\uffec\030\uffec\031\uffec\032\uffec\033\uffec\035\uffec\041\uffec" +
    "\074\uffec\105\uffec\107\uffec\110\uffec\111\uffec\112\uffec\113" +
    "\uffec\114\uffec\115\uffec\116\uffec\117\uffec\120\uffec\121\uffec" +
    "\001\002\000\046\026\007\030\025\032\010\035\013\041" +
    "\035\074\021\105\005\107\030\110\036\111\041\112\033" +
    "\113\043\114\020\115\034\116\024\117\015\120\040\121" +
    "\042\001\002\000\056\002\ufff1\026\ufff1\027\ufff1\030\ufff1" +
    "\031\ufff1\032\ufff1\033\ufff1\035\ufff1\041\ufff1\074\ufff1\105" +
    "\ufff1\107\ufff1\110\ufff1\111\ufff1\112\ufff1\113\ufff1\114\ufff1" +
    "\115\ufff1\116\ufff1\117\ufff1\120\ufff1\121\ufff1\001\002\000" +
    "\056\002\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb" +
    "\033\ufffb\035\ufffb\041\ufffb\074\ufffb\105\ufffb\107\ufffb\110" +
    "\ufffb\111\ufffb\112\ufffb\113\ufffb\114\ufffb\115\ufffb\116\ufffb" +
    "\117\ufffb\120\ufffb\121\ufffb\001\002\000\056\002\uffe9\026" +
    "\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\035\uffe9" +
    "\041\uffe9\074\uffe9\105\uffe9\107\uffe9\110\uffe9\111\uffe9\112" +
    "\uffe9\113\uffe9\114\uffe9\115\uffe9\116\uffe9\117\uffe9\120\uffe9" +
    "\121\uffe9\001\002\000\056\002\ufff0\026\ufff0\027\ufff0\030" +
    "\ufff0\031\ufff0\032\ufff0\033\ufff0\035\ufff0\041\ufff0\074\ufff0" +
    "\105\ufff0\107\ufff0\110\ufff0\111\ufff0\112\ufff0\113\ufff0\114" +
    "\ufff0\115\ufff0\116\ufff0\117\ufff0\120\ufff0\121\ufff0\001\002" +
    "\000\056\002\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032" +
    "\uffe7\033\uffe7\035\uffe7\041\uffe7\074\uffe7\105\uffe7\107\uffe7" +
    "\110\uffe7\111\uffe7\112\uffe7\113\uffe7\114\uffe7\115\uffe7\116" +
    "\uffe7\117\uffe7\120\uffe7\121\uffe7\001\002\000\056\002\uffee" +
    "\026\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee\035" +
    "\uffee\041\uffee\074\uffee\105\uffee\107\uffee\110\uffee\111\uffee" +
    "\112\uffee\113\uffee\114\uffee\115\uffee\116\uffee\117\uffee\120" +
    "\uffee\121\uffee\001\002\000\054\026\ufff9\027\ufff9\030\ufff9" +
    "\031\ufff9\032\ufff9\033\ufff9\035\ufff9\041\ufff9\074\ufff9\105" +
    "\ufff9\107\ufff9\110\ufff9\111\ufff9\112\ufff9\113\ufff9\114\ufff9" +
    "\115\ufff9\116\ufff9\117\ufff9\120\ufff9\121\ufff9\001\002\000" +
    "\050\026\007\030\025\032\010\033\050\035\013\041\035" +
    "\074\021\105\005\107\030\110\036\111\041\112\033\113" +
    "\043\114\020\115\034\116\024\117\015\120\040\121\042" +
    "\001\002\000\054\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032" +
    "\ufff7\033\ufff7\035\ufff7\041\ufff7\074\ufff7\105\ufff7\107\ufff7" +
    "\110\ufff7\111\ufff7\112\ufff7\113\ufff7\114\ufff7\115\ufff7\116" +
    "\ufff7\117\ufff7\120\ufff7\121\ufff7\001\002\000\054\026\ufff8" +
    "\027\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8\035\ufff8\041" +
    "\ufff8\074\ufff8\105\ufff8\107\ufff8\110\ufff8\111\ufff8\112\ufff8" +
    "\113\ufff8\114\ufff8\115\ufff8\116\ufff8\117\ufff8\120\ufff8\121" +
    "\ufff8\001\002\000\056\002\ufff4\026\ufff4\027\ufff4\030\ufff4" +
    "\031\ufff4\032\ufff4\033\ufff4\035\ufff4\041\ufff4\074\ufff4\105" +
    "\ufff4\107\ufff4\110\ufff4\111\ufff4\112\ufff4\113\ufff4\114\ufff4" +
    "\115\ufff4\116\ufff4\117\ufff4\120\ufff4\121\ufff4\001\002\000" +
    "\004\002\001\001\002\000\050\026\007\030\025\031\053" +
    "\032\010\035\013\041\035\074\021\105\005\107\030\110" +
    "\036\111\041\112\033\113\043\114\020\115\034\116\024" +
    "\117\015\120\040\121\042\001\002\000\056\002\ufff5\026" +
    "\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5\035\ufff5" +
    "\041\ufff5\074\ufff5\105\ufff5\107\ufff5\110\ufff5\111\ufff5\112" +
    "\ufff5\113\ufff5\114\ufff5\115\ufff5\116\ufff5\117\ufff5\120\ufff5" +
    "\121\ufff5\001\002\000\050\002\uffff\026\uffff\030\uffff\032" +
    "\uffff\035\uffff\041\uffff\074\uffff\105\uffff\107\uffff\110\uffff" +
    "\111\uffff\112\uffff\113\uffff\114\uffff\115\uffff\116\uffff\117" +
    "\uffff\120\uffff\121\uffff\001\002\000\056\002\uffdf\026\uffdf" +
    "\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\035\uffdf\041" +
    "\uffdf\074\uffdf\105\uffdf\107\uffdf\110\uffdf\111\uffdf\112\uffdf" +
    "\113\uffdf\114\uffdf\115\uffdf\116\uffdf\117\uffdf\120\uffdf\121" +
    "\uffdf\001\002\000\004\105\061\001\002\000\004\105\005" +
    "\001\002\000\062\002\uffe5\026\uffe5\027\uffe5\030\uffe5\031" +
    "\uffe5\032\uffe5\033\uffe5\035\uffe5\041\uffe5\074\uffe5\103\uffe5" +
    "\104\uffe5\105\uffe5\107\uffe5\110\uffe5\111\uffe5\112\uffe5\113" +
    "\uffe5\114\uffe5\115\uffe5\116\uffe5\117\uffe5\120\uffe5\121\uffe5" +
    "\001\002\000\056\002\uffe3\026\uffe3\027\uffe3\030\uffe3\031" +
    "\uffe3\032\uffe3\033\uffe3\035\uffe3\041\uffe3\074\uffe3\105\uffe3" +
    "\107\uffe3\110\uffe3\111\uffe3\112\uffe3\113\uffe3\114\uffe3\115" +
    "\uffe3\116\uffe3\117\uffe3\120\uffe3\121\uffe3\001\002\000\004" +
    "\105\uffe0\001\002\000\004\105\uffe1\001\002\000\046\026" +
    "\007\030\025\032\010\035\013\041\035\074\021\105\005" +
    "\107\030\110\036\111\041\112\033\113\043\114\020\115" +
    "\034\116\024\117\015\120\040\121\042\001\002\000\004" +
    "\033\066\001\002\000\056\002\ufff3\026\ufff3\027\ufff3\030" +
    "\ufff3\031\ufff3\032\ufff3\033\ufff3\035\ufff3\041\ufff3\074\ufff3" +
    "\105\ufff3\107\ufff3\110\ufff3\111\ufff3\112\ufff3\113\ufff3\114" +
    "\ufff3\115\ufff3\116\ufff3\117\ufff3\120\ufff3\121\ufff3\001\002" +
    "\000\050\026\007\027\070\030\025\032\010\035\013\041" +
    "\035\074\021\105\005\107\030\110\036\111\041\112\033" +
    "\113\043\114\020\115\034\116\024\117\015\120\040\121" +
    "\042\001\002\000\056\002\ufff6\026\ufff6\027\ufff6\030\ufff6" +
    "\031\ufff6\032\ufff6\033\ufff6\035\ufff6\041\ufff6\074\ufff6\105" +
    "\ufff6\107\ufff6\110\ufff6\111\ufff6\112\ufff6\113\ufff6\114\ufff6" +
    "\115\ufff6\116\ufff6\117\ufff6\120\ufff6\121\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\066\000\036\002\031\003\022\004\036\005\005\006" +
    "\021\007\030\012\026\013\011\015\003\020\025\021\010" +
    "\022\015\023\013\024\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\004\036\005\005" +
    "\006\021\007\030\012\026\013\011\015\043\016\066\017" +
    "\045\020\025\021\010\022\015\023\013\024\016\001\001" +
    "\000\034\004\036\005\005\006\021\007\030\012\026\013" +
    "\011\015\043\017\063\020\025\021\010\022\015\023\013" +
    "\024\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\021\061\022\015\023\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\021\054\022" +
    "\015\023\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\004\036\005\005\006\021\007" +
    "\030\012\026\013\011\015\053\020\025\021\010\022\015" +
    "\023\013\024\016\001\001\000\002\001\001\000\036\004" +
    "\036\005\005\006\021\007\030\012\026\013\011\015\043" +
    "\016\051\017\045\020\025\021\010\022\015\023\013\024" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\004\036\005\005\006\021" +
    "\007\030\012\026\013\011\015\043\016\044\017\045\020" +
    "\025\021\010\022\015\023\013\024\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\004\036\005\005\006\021\007\030\012\026\013" +
    "\011\015\043\017\046\020\025\021\010\022\015\023\013" +
    "\024\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\004\036\005\005" +
    "\006\021\007\030\012\026\013\011\015\043\017\046\020" +
    "\025\021\010\022\015\023\013\024\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\004" +
    "\036\005\005\006\021\007\030\012\026\013\011\015\043" +
    "\017\064\020\025\021\010\022\015\023\013\024\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\004\036" +
    "\005\005\006\021\007\030\012\026\013\011\015\043\017" +
    "\046\020\025\021\010\022\015\023\013\024\016\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ClojureParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ClojureParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ClojureParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static void main(String args[]) throws Exception {
		if (args.length==0) 
		{
		new ClojureParser(new _Lexer(System.in)).parse();
		}
		else
		{ 
		new ClojureParser(new _Lexer(new java.io.FileInputStream(args[0]))).parse();
		}
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ClojureParser$actions {
  private final ClojureParser parser;

  /** Constructor */
  CUP$ClojureParser$actions(ClojureParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ClojureParser$do_action(
    int                        CUP$ClojureParser$act_num,
    java_cup.runtime.lr_parser CUP$ClojureParser$parser,
    java.util.Stack            CUP$ClojureParser$stack,
    int                        CUP$ClojureParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ClojureParser$result;

      /* select the action based on the action number */
      switch (CUP$ClojureParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // empty ::= 
            {
              Object RESULT =null;

              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("empty",10, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // atom ::= symbol 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("atom",11, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // atom ::= literal 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("atom",11, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // atom ::= series 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("atom",11, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // symbol ::= symbol_part 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		
        RESULT = RT.var("user",(String)e);
        
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("symbol",14, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // symbol ::= type_hint symbol_part 
            {
              Object RESULT =null;
		int hintleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).left;
		int hintright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).right;
		Object hint = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		
                Symbol t = Symbol.create("user",(String)e);
                t = t.withMeta ((IPersistentMap)RT.map(Keyword.create("tag"),hint));
		RESULT = t;
		System.out.println("DISP_META STRING_LITERAL " + e);
		
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("symbol",14, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type_hint ::= DISP_META symbol_part 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		
		RESULT = e;
		System.out.println("DISP_META symbol_part " + e);
		
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("type_hint",18, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // type_hint ::= DISP_META STRING_LITERAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		
		RESULT = e;
		System.out.println("DISP_META STRING_LITERAL " + e);
		
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("type_hint",18, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // symbol_part ::= q_name 
            {
              Object RESULT =null;
		int symleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int symright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		
		RESULT = clojure.lang.Symbol.create((String)sym);
		System.out.println("symbol "+ sym);
		
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("symbol_part",15, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // symbol_part ::= q_name symNS_SEP symATOM 
            {
              Object RESULT =null;
		int nsleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-2)).left;
		int nsright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-2)).right;
		Object ns = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-2)).value;
		int symleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int symright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		
		RESULT = clojure.lang.Symbol.create((String)ns,(String)sym);
		System.out.println("symbol " + ns + "/" + sym);
		
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("symbol_part",15, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-2)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // q_name ::= q_name_part 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("q_name",16, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // q_name ::= q_name symDOT q_name_part 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = ((String)e1) + "." + ((String)e2); 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("q_name",16, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-2)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // q_name_part ::= symATOM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("q_name_part",17, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // literal ::= NULL_LITERAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = RT.readString((String)e); 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // literal ::= KEYWORD 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = RT.readString((String)e); 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // literal ::= WRONG_STRING_LITERAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = RT.readString((String)e); 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // literal ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = RT.readString((String)e); 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // literal ::= CHAR_LITERAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = RT.readString((String)e); 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // literal ::= RATIO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = RT.readString((String)e); 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // literal ::= BIG_DECIMAL_LITERAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = RT.readString((String)e); 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // literal ::= DOUBLE_LITERAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = RT.readString((String)e); 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // literal ::= FLOAT_LITERAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = RT.readString((String)e); 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // literal ::= LONG_LITERAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = RT.readString((String)e); 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // literal ::= BIG_INT_LITERAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = RT.readString((String)e); 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // literal ::= INTEGER_LITERAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = RT.readString((String)e); 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // map ::= LEFT_CURLY operand operand RIGHT_CURLY 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).value;
		
 		RESULT = RT.map(e1,e2);
		System.out.println("map {" + e1 + "," + e2 +"}"); 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("map",2, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-3)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // set ::= DISP_SET operands RIGHT_CURLY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).value;
		 
		RESULT = RT.set (e); 
		System.out.println("set #{" + e +"}"); 
	
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("set",4, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-2)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // vector ::= LEFT_SQUARE operands RIGHT_SQUARE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).value;
		
 		RESULT = RT.vector(e);
		System.out.println("vector [" + e +"]"); 
	
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("vector",3, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-2)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // list ::= LEFT_PAREN operands RIGHT_PAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).value;
		 
		System.out.println("list [" + e +"]");
		RESULT = RT.list (e); 
		
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("list",5, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-2)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // operands ::= operand 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 
		System.out.println("operand " + e ); 
		RESULT = e; 
		
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("operands",12, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // operands ::= operands operand 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		
	if (e1 instanceof IPersistentCollection)
	{
		System.out.println("operands:conj " + e1 + "," + e2);
		RESULT = RT.conj((IPersistentCollection)e1,e2);
	} else
	{
	System.out.println("operands:vec " + e1 + "," + e2);
	RESULT = RT.vector(e1,e2);
	} 
	
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("operands",12, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // operand ::= atom 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		RESULT = e; 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("operand",13, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // series ::= set 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("series",9, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // series ::= map 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("series",9, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // series ::= vector 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("series",9, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // series ::= list 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("series",9, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr_part ::= atom 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("expr_part",1, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr_part ::= expr_part atom 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		
			if (e1 instanceof IPersistentCollection)
				RESULT = RT.conj((IPersistentCollection)e1,e2);
			RESULT = RT.vector(e1,e2); 
			
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("expr_part",1, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s_expr ::= expr_part 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("s_expr",0, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s_expr EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).value;
		RESULT = start_val;
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ClojureParser$parser.done_parsing();
          return CUP$ClojureParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

