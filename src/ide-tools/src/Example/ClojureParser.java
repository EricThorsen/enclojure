
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Oct 30 16:01:38 EDT 2009
//----------------------------------------------------

package Example;

import java_cup.runtime.*;
import org.enclojure.flex._Lexer;
import java.io.*;
import org.enclojure.flex.*;
import clojure.lang.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Oct 30 16:01:38 EDT 2009
  */
public class ClojureParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ClojureParser() {super();}

  /** Constructor which sets the default scanner. */
  public ClojureParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ClojureParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\042\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\017\003\000" +
    "\002\016\004\000\002\016\003\000\002\007\005\000\002" +
    "\005\005\000\002\006\006\000\002\004\006\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\020\005\000\002\020" +
    "\003\000\002\020\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\014\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\056\000\046\026\010\030\022\032\011\037\007\064" +
    "\015\073\023\075\005\077\025\100\033\101\035\102\030" +
    "\103\036\104\014\105\031\106\020\107\013\110\034\111" +
    "\037\001\002\000\050\002\ufffe\026\ufffe\030\ufffe\032\ufffe" +
    "\037\ufffe\064\ufffe\073\ufffe\075\ufffe\077\ufffe\100\ufffe\101" +
    "\ufffe\102\ufffe\103\ufffe\104\ufffe\105\ufffe\106\ufffe\107\ufffe" +
    "\110\ufffe\111\ufffe\001\002\000\060\002\uffe5\026\uffe5\027" +
    "\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\037\uffe5\064\uffe5" +
    "\073\uffe5\074\057\075\uffe5\077\uffe5\100\uffe5\101\uffe5\102" +
    "\uffe5\103\uffe5\104\uffe5\105\uffe5\106\uffe5\107\uffe5\110\uffe5" +
    "\111\uffe5\001\002\000\056\002\ufffc\026\ufffc\027\ufffc\030" +
    "\ufffc\031\ufffc\032\ufffc\033\ufffc\037\ufffc\064\ufffc\073\ufffc" +
    "\075\ufffc\077\ufffc\100\ufffc\101\ufffc\102\ufffc\103\ufffc\104" +
    "\ufffc\105\ufffc\106\ufffc\107\ufffc\110\ufffc\111\ufffc\001\002" +
    "\000\004\032\054\001\002\000\046\026\010\030\022\032" +
    "\011\037\007\064\015\073\023\075\005\077\025\100\033" +
    "\101\035\102\030\103\036\104\014\105\031\106\020\107" +
    "\013\110\034\111\037\001\002\000\046\026\010\030\022" +
    "\032\011\037\007\064\015\073\023\075\005\077\025\100" +
    "\033\101\035\102\030\103\036\104\014\105\031\106\020" +
    "\107\013\110\034\111\037\001\002\000\056\002\uffe3\026" +
    "\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\037\uffe3" +
    "\064\uffe3\073\uffe3\075\uffe3\077\uffe3\100\uffe3\101\uffe3\102" +
    "\uffe3\103\uffe3\104\uffe3\105\uffe3\106\uffe3\107\uffe3\110\uffe3" +
    "\111\uffe3\001\002\000\056\002\uffea\026\uffea\027\uffea\030" +
    "\uffea\031\uffea\032\uffea\033\uffea\037\uffea\064\uffea\073\uffea" +
    "\075\uffea\077\uffea\100\uffea\101\uffea\102\uffea\103\uffea\104" +
    "\uffea\105\uffea\106\uffea\107\uffea\110\uffea\111\uffea\001\002" +
    "\000\056\002\uffed\026\uffed\027\uffed\030\uffed\031\uffed\032" +
    "\uffed\033\uffed\037\uffed\064\uffed\073\uffed\075\uffed\077\uffed" +
    "\100\uffed\101\uffed\102\uffed\103\uffed\104\uffed\105\uffed\106" +
    "\uffed\107\uffed\110\uffed\111\uffed\001\002\000\056\002\uffe8" +
    "\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\037" +
    "\uffe8\064\uffe8\073\uffe8\075\uffe8\077\uffe8\100\uffe8\101\uffe8" +
    "\102\uffe8\103\uffe8\104\uffe8\105\uffe8\106\uffe8\107\uffe8\110" +
    "\uffe8\111\uffe8\001\002\000\056\002\ufffa\026\ufffa\027\ufffa" +
    "\030\ufffa\031\ufffa\032\ufffa\033\ufffa\037\ufffa\064\ufffa\073" +
    "\ufffa\075\ufffa\077\ufffa\100\ufffa\101\ufffa\102\ufffa\103\ufffa" +
    "\104\ufffa\105\ufffa\106\ufffa\107\ufffa\110\ufffa\111\ufffa\001" +
    "\002\000\050\002\000\026\010\030\022\032\011\037\007" +
    "\064\015\073\023\075\005\077\025\100\033\101\035\102" +
    "\030\103\036\104\014\105\031\106\020\107\013\110\034" +
    "\111\037\001\002\000\056\002\uffeb\026\uffeb\027\uffeb\030" +
    "\uffeb\031\uffeb\032\uffeb\033\uffeb\037\uffeb\064\uffeb\073\uffeb" +
    "\075\uffeb\077\uffeb\100\uffeb\101\uffeb\102\uffeb\103\uffeb\104" +
    "\uffeb\105\uffeb\106\uffeb\107\uffeb\110\uffeb\111\uffeb\001\002" +
    "\000\056\002\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032" +
    "\uffe1\033\uffe1\037\uffe1\064\uffe1\073\uffe1\075\uffe1\077\uffe1" +
    "\100\uffe1\101\uffe1\102\uffe1\103\uffe1\104\uffe1\105\uffe1\106" +
    "\uffe1\107\uffe1\110\uffe1\111\uffe1\001\002\000\046\026\010" +
    "\030\022\032\011\037\007\064\015\073\023\075\005\077" +
    "\025\100\033\101\035\102\030\103\036\104\014\105\031" +
    "\106\020\107\013\110\034\111\037\001\002\000\056\002" +
    "\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4" +
    "\037\uffe4\064\uffe4\073\uffe4\075\uffe4\077\uffe4\100\uffe4\101" +
    "\uffe4\102\uffe4\103\uffe4\104\uffe4\105\uffe4\106\uffe4\107\uffe4" +
    "\110\uffe4\111\uffe4\001\002\000\056\002\uffe2\026\uffe2\027" +
    "\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\037\uffe2\064\uffe2" +
    "\073\uffe2\075\uffe2\077\uffe2\100\uffe2\101\uffe2\102\uffe2\103" +
    "\uffe2\104\uffe2\105\uffe2\106\uffe2\107\uffe2\110\uffe2\111\uffe2" +
    "\001\002\000\056\002\ufff2\026\ufff2\027\ufff2\030\ufff2\031" +
    "\ufff2\032\ufff2\033\ufff2\037\ufff2\064\ufff2\073\ufff2\075\ufff2" +
    "\077\ufff2\100\ufff2\101\ufff2\102\ufff2\103\ufff2\104\ufff2\105" +
    "\ufff2\106\ufff2\107\ufff2\110\ufff2\111\ufff2\001\002\000\056" +
    "\002\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033" +
    "\ufffd\037\ufffd\064\ufffd\073\ufffd\075\ufffd\077\ufffd\100\ufffd" +
    "\101\ufffd\102\ufffd\103\ufffd\104\ufffd\105\ufffd\106\ufffd\107" +
    "\ufffd\110\ufffd\111\ufffd\001\002\000\004\002\040\001\002" +
    "\000\056\002\uffef\026\uffef\027\uffef\030\uffef\031\uffef\032" +
    "\uffef\033\uffef\037\uffef\064\uffef\073\uffef\075\uffef\077\uffef" +
    "\100\uffef\101\uffef\102\uffef\103\uffef\104\uffef\105\uffef\106" +
    "\uffef\107\uffef\110\uffef\111\uffef\001\002\000\056\002\uffec" +
    "\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec\037" +
    "\uffec\064\uffec\073\uffec\075\uffec\077\uffec\100\uffec\101\uffec" +
    "\102\uffec\103\uffec\104\uffec\105\uffec\106\uffec\107\uffec\110" +
    "\uffec\111\uffec\001\002\000\056\002\ufffb\026\ufffb\027\ufffb" +
    "\030\ufffb\031\ufffb\032\ufffb\033\ufffb\037\ufffb\064\ufffb\073" +
    "\ufffb\075\ufffb\077\ufffb\100\ufffb\101\ufffb\102\ufffb\103\ufffb" +
    "\104\ufffb\105\ufffb\106\ufffb\107\ufffb\110\ufffb\111\ufffb\001" +
    "\002\000\056\002\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1" +
    "\032\ufff1\033\ufff1\037\ufff1\064\ufff1\073\ufff1\075\ufff1\077" +
    "\ufff1\100\ufff1\101\ufff1\102\ufff1\103\ufff1\104\ufff1\105\ufff1" +
    "\106\ufff1\107\ufff1\110\ufff1\111\ufff1\001\002\000\056\002" +
    "\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9" +
    "\037\uffe9\064\uffe9\073\uffe9\075\uffe9\077\uffe9\100\uffe9\101" +
    "\uffe9\102\uffe9\103\uffe9\104\uffe9\105\uffe9\106\uffe9\107\uffe9" +
    "\110\uffe9\111\uffe9\001\002\000\056\002\ufff0\026\ufff0\027" +
    "\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\037\ufff0\064\ufff0" +
    "\073\ufff0\075\ufff0\077\ufff0\100\ufff0\101\ufff0\102\ufff0\103" +
    "\ufff0\104\ufff0\105\ufff0\106\ufff0\107\ufff0\110\ufff0\111\ufff0" +
    "\001\002\000\056\002\uffee\026\uffee\027\uffee\030\uffee\031" +
    "\uffee\032\uffee\033\uffee\037\uffee\064\uffee\073\uffee\075\uffee" +
    "\077\uffee\100\uffee\101\uffee\102\uffee\103\uffee\104\uffee\105" +
    "\uffee\106\uffee\107\uffee\110\uffee\111\uffee\001\002\000\056" +
    "\002\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033" +
    "\uffe7\037\uffe7\064\uffe7\073\uffe7\075\uffe7\077\uffe7\100\uffe7" +
    "\101\uffe7\102\uffe7\103\uffe7\104\uffe7\105\uffe7\106\uffe7\107" +
    "\uffe7\110\uffe7\111\uffe7\001\002\000\004\002\001\001\002" +
    "\000\054\026\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9\033" +
    "\ufff9\037\ufff9\064\ufff9\073\ufff9\075\ufff9\077\ufff9\100\ufff9" +
    "\101\ufff9\102\ufff9\103\ufff9\104\ufff9\105\ufff9\106\ufff9\107" +
    "\ufff9\110\ufff9\111\ufff9\001\002\000\050\026\010\030\022" +
    "\031\044\032\011\037\007\064\015\073\023\075\005\077" +
    "\025\100\033\101\035\102\030\103\036\104\014\105\031" +
    "\106\020\107\013\110\034\111\037\001\002\000\054\026" +
    "\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\037\ufff7" +
    "\064\ufff7\073\ufff7\075\ufff7\077\ufff7\100\ufff7\101\ufff7\102" +
    "\ufff7\103\ufff7\104\ufff7\105\ufff7\106\ufff7\107\ufff7\110\ufff7" +
    "\111\ufff7\001\002\000\056\002\ufff5\026\ufff5\027\ufff5\030" +
    "\ufff5\031\ufff5\032\ufff5\033\ufff5\037\ufff5\064\ufff5\073\ufff5" +
    "\075\ufff5\077\ufff5\100\ufff5\101\ufff5\102\ufff5\103\ufff5\104" +
    "\ufff5\105\ufff5\106\ufff5\107\ufff5\110\ufff5\111\ufff5\001\002" +
    "\000\054\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\033" +
    "\ufff8\037\ufff8\064\ufff8\073\ufff8\075\ufff8\077\ufff8\100\ufff8" +
    "\101\ufff8\102\ufff8\103\ufff8\104\ufff8\105\ufff8\106\ufff8\107" +
    "\ufff8\110\ufff8\111\ufff8\001\002\000\050\002\uffff\026\uffff" +
    "\030\uffff\032\uffff\037\uffff\064\uffff\073\uffff\075\uffff\077" +
    "\uffff\100\uffff\101\uffff\102\uffff\103\uffff\104\uffff\105\uffff" +
    "\106\uffff\107\uffff\110\uffff\111\uffff\001\002\000\046\026" +
    "\010\030\022\032\011\037\007\064\015\073\023\075\005" +
    "\077\025\100\033\101\035\102\030\103\036\104\014\105" +
    "\031\106\020\107\013\110\034\111\037\001\002\000\004" +
    "\033\051\001\002\000\056\002\ufff3\026\ufff3\027\ufff3\030" +
    "\ufff3\031\ufff3\032\ufff3\033\ufff3\037\ufff3\064\ufff3\073\ufff3" +
    "\075\ufff3\077\ufff3\100\ufff3\101\ufff3\102\ufff3\103\ufff3\104" +
    "\ufff3\105\ufff3\106\ufff3\107\ufff3\110\ufff3\111\ufff3\001\002" +
    "\000\050\026\010\027\053\030\022\032\011\037\007\064" +
    "\015\073\023\075\005\077\025\100\033\101\035\102\030" +
    "\103\036\104\014\105\031\106\020\107\013\110\034\111" +
    "\037\001\002\000\056\002\ufff6\026\ufff6\027\ufff6\030\ufff6" +
    "\031\ufff6\032\ufff6\033\ufff6\037\ufff6\064\ufff6\073\ufff6\075" +
    "\ufff6\077\ufff6\100\ufff6\101\ufff6\102\ufff6\103\ufff6\104\ufff6" +
    "\105\ufff6\106\ufff6\107\ufff6\110\ufff6\111\ufff6\001\002\000" +
    "\046\026\010\030\022\032\011\037\007\064\015\073\023" +
    "\075\005\077\025\100\033\101\035\102\030\103\036\104" +
    "\014\105\031\106\020\107\013\110\034\111\037\001\002" +
    "\000\050\026\010\030\022\032\011\033\056\037\007\064" +
    "\015\073\023\075\005\077\025\100\033\101\035\102\030" +
    "\103\036\104\014\105\031\106\020\107\013\110\034\111" +
    "\037\001\002\000\056\002\ufff4\026\ufff4\027\ufff4\030\ufff4" +
    "\031\ufff4\032\ufff4\033\ufff4\037\ufff4\064\ufff4\073\ufff4\075" +
    "\ufff4\077\ufff4\100\ufff4\101\ufff4\102\ufff4\103\ufff4\104\ufff4" +
    "\105\ufff4\106\ufff4\107\ufff4\110\ufff4\111\ufff4\001\002\000" +
    "\004\075\060\001\002\000\056\002\uffe6\026\uffe6\027\uffe6" +
    "\030\uffe6\031\uffe6\032\uffe6\033\uffe6\037\uffe6\064\uffe6\073" +
    "\uffe6\075\uffe6\077\uffe6\100\uffe6\101\uffe6\102\uffe6\103\uffe6" +
    "\104\uffe6\105\uffe6\106\uffe6\107\uffe6\110\uffe6\111\uffe6\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\056\000\026\002\026\003\016\004\031\005\005\006" +
    "\015\007\025\012\023\013\011\015\003\020\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\004\031\005\005\006\015\007\025" +
    "\012\023\013\011\015\040\016\051\017\042\020\020\001" +
    "\001\000\024\004\031\005\005\006\015\007\025\012\023" +
    "\013\011\015\040\017\046\020\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\004\031\005\005\006\015\007" +
    "\025\012\023\013\011\015\045\020\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\004\031\005\005\006" +
    "\015\007\025\012\023\013\011\015\040\016\041\017\042" +
    "\020\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\004\031\005\005\006\015\007\025\012\023\013\011" +
    "\015\040\017\044\020\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\004\031\005\005\006\015\007\025\012\023\013\011\015" +
    "\040\017\047\020\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\004\031\005\005\006\015\007\025\012" +
    "\023\013\011\015\040\017\044\020\020\001\001\000\002" +
    "\001\001\000\026\004\031\005\005\006\015\007\025\012" +
    "\023\013\011\015\040\016\054\017\042\020\020\001\001" +
    "\000\024\004\031\005\005\006\015\007\025\012\023\013" +
    "\011\015\040\017\044\020\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ClojureParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ClojureParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ClojureParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static void main(String args[]) throws Exception {
		if (args.length==0) 
		{
		new ClojureParser(new _Lexer(System.in)).parse();
		}
		else
		{ 
		new ClojureParser(new _Lexer(new java.io.FileInputStream(args[0]))).parse();
		}
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ClojureParser$actions {
  private final ClojureParser parser;

  /** Constructor */
  CUP$ClojureParser$actions(ClojureParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ClojureParser$do_action(
    int                        CUP$ClojureParser$act_num,
    java_cup.runtime.lr_parser CUP$ClojureParser$parser,
    java.util.Stack            CUP$ClojureParser$stack,
    int                        CUP$ClojureParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ClojureParser$result;

      /* select the action based on the action number */
      switch (CUP$ClojureParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // empty ::= 
            {
              Object RESULT =null;

              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("empty",10, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // atom ::= symbol 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("atom",11, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // atom ::= literal 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("atom",11, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // atom ::= series 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("atom",11, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // symbol ::= symDOT 
            {
              Object RESULT =null;
		int symleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int symright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		
		RESULT = clojure.lang.Symbol.create((String)sym);
		System.out.println("symbol "+ sym);
		
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("symbol",14, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // symbol ::= symATOM 
            {
              Object RESULT =null;
		int symleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int symright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		
		RESULT = clojure.lang.Symbol.create((String)sym);
		System.out.println("symbol "+ sym);
		
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("symbol",14, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // symbol ::= symATOM symNS_SEP symATOM 
            {
              Object RESULT =null;
		int nsleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-2)).left;
		int nsright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-2)).right;
		Object ns = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-2)).value;
		int symleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int symright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		
		RESULT = clojure.lang.Symbol.create((String)ns,(String)sym);
		System.out.println("symbol " + ns + "/" + sym);
		
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("symbol",14, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-2)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // literal ::= NULL_LITERAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = RT.readString((String)e); 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // literal ::= KEYWORD 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = RT.readString((String)e); 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // literal ::= WRONG_STRING_LITERAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = RT.readString((String)e); 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // literal ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = RT.readString((String)e); 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // literal ::= CHAR_LITERAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = RT.readString((String)e); 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // literal ::= RATIO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = RT.readString((String)e); 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // literal ::= BIG_DECIMAL_LITERAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = RT.readString((String)e); 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // literal ::= DOUBLE_LITERAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = RT.readString((String)e); 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // literal ::= FLOAT_LITERAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = RT.readString((String)e); 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // literal ::= LONG_LITERAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = RT.readString((String)e); 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // literal ::= BIG_INT_LITERAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = RT.readString((String)e); 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // literal ::= INTEGER_LITERAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = RT.readString((String)e); 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // map ::= LEFT_CURLY operand operand RIGHT_CURLY 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).value;
		
 		RESULT = RT.map(e1,e2);
		System.out.println("map {" + e1 + "," + e2 +"}"); 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("map",2, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-3)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // set ::= SHARP LEFT_CURLY operands RIGHT_CURLY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).value;
		 
		RESULT = RT.set (e); 
		System.out.println("set #{" + e +"}"); 
		
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("set",4, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-3)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // vector ::= LEFT_SQUARE operands RIGHT_SQUARE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).value;
		
 		RESULT = RT.vector(e);
		System.out.println("vector [" + e +"]"); 
		
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("vector",3, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-2)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // list ::= LEFT_PAREN operands RIGHT_PAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).value;
		 
		System.out.println("list [" + e +"]");
		RESULT = RT.list (e); 
		
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("list",5, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-2)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // operands ::= operand 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 
		System.out.println("operand " + e ); 
		RESULT = e; 
		
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("operands",12, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // operands ::= operands operand 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		
	if (e1 instanceof IPersistentCollection)
	{
		System.out.println("operands:conj " + e1 + "," + e2);
		RESULT = RT.conj((IPersistentCollection)e1,e2);
	} else
	{
	System.out.println("operands:vec " + e1 + "," + e2);
	RESULT = RT.vector(e1,e2);
	} 
	
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("operands",12, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // operand ::= atom 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		RESULT = e; 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("operand",13, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // series ::= set 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("series",9, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // series ::= map 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("series",9, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // series ::= vector 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("series",9, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // series ::= list 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("series",9, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr_part ::= atom 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("expr_part",1, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr_part ::= expr_part atom 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		
			if (e1 instanceof IPersistentCollection)
				RESULT = RT.conj((IPersistentCollection)e1,e2);
			RESULT = RT.vector(e1,e2); 
			
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("expr_part",1, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s_expr ::= expr_part 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("s_expr",0, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s_expr EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).value;
		RESULT = start_val;
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ClojureParser$parser.done_parsing();
          return CUP$ClojureParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

