
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Oct 26 16:05:18 EDT 2009
//----------------------------------------------------

package Example;

import java_cup.runtime.*;
import org.enclojure.flex._Lexer;
import java.io.*;
import org.enclojure.flex.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Oct 26 16:05:18 EDT 2009
  */
public class ClojureParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ClojureParser() {super();}

  /** Constructor which sets the default scanner. */
  public ClojureParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ClojureParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\026\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\006\005\000\002\004\005\000" +
    "\002\005\005\000\002\003\006\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\041\000\040\026\005\030\015\032\006\037\007\075" +
    "\017\076\024\077\027\100\022\101\030\102\012\103\023" +
    "\104\014\105\011\106\026\107\031\001\002\000\050\002" +
    "\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd" +
    "\037\ufffd\075\ufffd\076\ufffd\077\ufffd\100\ufffd\101\ufffd\102" +
    "\ufffd\103\ufffd\104\ufffd\105\ufffd\106\ufffd\107\ufffd\001\002" +
    "\000\040\026\005\030\015\032\006\037\007\075\017\076" +
    "\024\077\027\100\022\101\030\102\012\103\023\104\014" +
    "\105\011\106\026\107\031\001\002\000\040\026\005\030" +
    "\015\032\006\037\007\075\017\076\024\077\027\100\022" +
    "\101\030\102\012\103\023\104\014\105\011\106\026\107" +
    "\031\001\002\000\040\026\005\030\015\032\006\037\007" +
    "\075\017\076\024\077\027\100\022\101\030\102\012\103" +
    "\023\104\014\105\011\106\026\107\031\001\002\000\050" +
    "\002\uffff\026\uffff\027\uffff\030\uffff\031\uffff\032\uffff\033" +
    "\uffff\037\uffff\075\uffff\076\uffff\077\uffff\100\uffff\101\uffff" +
    "\102\uffff\103\uffff\104\uffff\105\uffff\106\uffff\107\uffff\001" +
    "\002\000\050\002\uffee\026\uffee\027\uffee\030\uffee\031\uffee" +
    "\032\uffee\033\uffee\037\uffee\075\uffee\076\uffee\077\uffee\100" +
    "\uffee\101\uffee\102\uffee\103\uffee\104\uffee\105\uffee\106\uffee" +
    "\107\uffee\001\002\000\050\002\ufff1\026\ufff1\027\ufff1\030" +
    "\ufff1\031\ufff1\032\ufff1\033\ufff1\037\ufff1\075\ufff1\076\ufff1" +
    "\077\ufff1\100\ufff1\101\ufff1\102\ufff1\103\ufff1\104\ufff1\105" +
    "\ufff1\106\ufff1\107\ufff1\001\002\000\050\002\ufffb\026\ufffb" +
    "\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb\037\ufffb\075" +
    "\ufffb\076\ufffb\077\ufffb\100\ufffb\101\ufffb\102\ufffb\103\ufffb" +
    "\104\ufffb\105\ufffb\106\ufffb\107\ufffb\001\002\000\050\002" +
    "\uffef\026\uffef\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef" +
    "\037\uffef\075\uffef\076\uffef\077\uffef\100\uffef\101\uffef\102" +
    "\uffef\103\uffef\104\uffef\105\uffef\106\uffef\107\uffef\001\002" +
    "\000\040\026\005\030\015\032\006\037\007\075\017\076" +
    "\024\077\027\100\022\101\030\102\012\103\023\104\014" +
    "\105\011\106\026\107\031\001\002\000\050\002\000\026" +
    "\000\027\000\030\000\031\000\032\000\033\000\037\000" +
    "\075\000\076\000\077\000\100\000\101\000\102\000\103" +
    "\000\104\000\105\000\106\000\107\000\001\002\000\050" +
    "\002\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033" +
    "\ufff6\037\ufff6\075\ufff6\076\ufff6\077\ufff6\100\ufff6\101\ufff6" +
    "\102\ufff6\103\ufff6\104\ufff6\105\ufff6\106\ufff6\107\ufff6\001" +
    "\002\000\050\002\ufffe\026\ufffe\027\ufffe\030\ufffe\031\ufffe" +
    "\032\ufffe\033\ufffe\037\ufffe\075\ufffe\076\ufffe\077\ufffe\100" +
    "\ufffe\101\ufffe\102\ufffe\103\ufffe\104\ufffe\105\ufffe\106\ufffe" +
    "\107\ufffe\001\002\000\004\002\032\001\002\000\050\002" +
    "\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3" +
    "\037\ufff3\075\ufff3\076\ufff3\077\ufff3\100\ufff3\101\ufff3\102" +
    "\ufff3\103\ufff3\104\ufff3\105\ufff3\106\ufff3\107\ufff3\001\002" +
    "\000\050\002\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032" +
    "\ufff0\033\ufff0\037\ufff0\075\ufff0\076\ufff0\077\ufff0\100\ufff0" +
    "\101\ufff0\102\ufff0\103\ufff0\104\ufff0\105\ufff0\106\ufff0\107" +
    "\ufff0\001\002\000\050\002\ufff5\026\ufff5\027\ufff5\030\ufff5" +
    "\031\ufff5\032\ufff5\033\ufff5\037\ufff5\075\ufff5\076\ufff5\077" +
    "\ufff5\100\ufff5\101\ufff5\102\ufff5\103\ufff5\104\ufff5\105\ufff5" +
    "\106\ufff5\107\ufff5\001\002\000\050\002\ufffc\026\ufffc\027" +
    "\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc\037\ufffc\075\ufffc" +
    "\076\ufffc\077\ufffc\100\ufffc\101\ufffc\102\ufffc\103\ufffc\104" +
    "\ufffc\105\ufffc\106\ufffc\107\ufffc\001\002\000\050\002\uffed" +
    "\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed\037" +
    "\uffed\075\uffed\076\uffed\077\uffed\100\uffed\101\uffed\102\uffed" +
    "\103\uffed\104\uffed\105\uffed\106\uffed\107\uffed\001\002\000" +
    "\050\002\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4" +
    "\033\ufff4\037\ufff4\075\ufff4\076\ufff4\077\ufff4\100\ufff4\101" +
    "\ufff4\102\ufff4\103\ufff4\104\ufff4\105\ufff4\106\ufff4\107\ufff4" +
    "\001\002\000\050\002\ufff2\026\ufff2\027\ufff2\030\ufff2\031" +
    "\ufff2\032\ufff2\033\ufff2\037\ufff2\075\ufff2\076\ufff2\077\ufff2" +
    "\100\ufff2\101\ufff2\102\ufff2\103\ufff2\104\ufff2\105\ufff2\106" +
    "\ufff2\107\ufff2\001\002\000\050\002\uffec\026\uffec\027\uffec" +
    "\030\uffec\031\uffec\032\uffec\033\uffec\037\uffec\075\uffec\076" +
    "\uffec\077\uffec\100\uffec\101\uffec\102\uffec\103\uffec\104\uffec" +
    "\105\uffec\106\uffec\107\uffec\001\002\000\004\002\001\001" +
    "\002\000\004\031\034\001\002\000\050\002\ufff9\026\ufff9" +
    "\027\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9\037\ufff9\075" +
    "\ufff9\076\ufff9\077\ufff9\100\ufff9\101\ufff9\102\ufff9\103\ufff9" +
    "\104\ufff9\105\ufff9\106\ufff9\107\ufff9\001\002\000\004\033" +
    "\036\001\002\000\050\002\ufff8\026\ufff8\027\ufff8\030\ufff8" +
    "\031\ufff8\032\ufff8\033\ufff8\037\ufff8\075\ufff8\076\ufff8\077" +
    "\ufff8\100\ufff8\101\ufff8\102\ufff8\103\ufff8\104\ufff8\105\ufff8" +
    "\106\ufff8\107\ufff8\001\002\000\040\026\005\030\015\032" +
    "\006\037\007\075\017\076\024\077\027\100\022\101\030" +
    "\102\012\103\023\104\014\105\011\106\026\107\031\001" +
    "\002\000\004\033\041\001\002\000\050\002\ufff7\026\ufff7" +
    "\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\037\ufff7\075" +
    "\ufff7\076\ufff7\077\ufff7\100\ufff7\101\ufff7\102\ufff7\103\ufff7" +
    "\104\ufff7\105\ufff7\106\ufff7\107\ufff7\001\002\000\004\027" +
    "\043\001\002\000\050\002\ufffa\026\ufffa\027\ufffa\030\ufffa" +
    "\031\ufffa\032\ufffa\033\ufffa\037\ufffa\075\ufffa\076\ufffa\077" +
    "\ufffa\100\ufffa\101\ufffa\102\ufffa\103\ufffa\104\ufffa\105\ufffa" +
    "\106\ufffa\107\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\041\000\020\002\020\003\024\004\003\005\012\006" +
    "\017\007\015\010\007\001\001\000\002\001\001\000\020" +
    "\002\041\003\024\004\003\005\012\006\017\007\015\010" +
    "\007\001\001\000\020\002\036\003\024\004\003\005\012" +
    "\006\017\007\015\010\007\001\001\000\020\002\034\003" +
    "\024\004\003\005\012\006\017\007\015\010\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\002\032\003\024" +
    "\004\003\005\012\006\017\007\015\010\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\002\037\003\024\004\003\005\012\006" +
    "\017\007\015\010\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ClojureParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ClojureParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ClojureParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static void main(String args[]) throws Exception {
		if (args.length==0) 
		{
		new ClojureParser(new _Lexer(System.in)).parse();
		}
		else
		{ 
		new ClojureParser(new _Lexer(new java.io.FileInputStream(args[0]))).parse();
		}
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ClojureParser$actions {
  private final ClojureParser parser;

  /** Constructor */
  CUP$ClojureParser$actions(ClojureParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ClojureParser$do_action(
    int                        CUP$ClojureParser$act_num,
    java_cup.runtime.lr_parser CUP$ClojureParser$parser,
    java.util.Stack            CUP$ClojureParser$stack,
    int                        CUP$ClojureParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ClojureParser$result;

      /* select the action based on the action number */
      switch (CUP$ClojureParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // literal ::= NULL_LITERAL 
            {
              Object RESULT =null;

              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",5, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // literal ::= WRONG_STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",5, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // literal ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",5, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // literal ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",5, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // literal ::= RATIO 
            {
              Object RESULT =null;

              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",5, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // literal ::= BIG_DECIMAL_LITERAL 
            {
              Object RESULT =null;

              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",5, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // literal ::= DOUBLE_LITERAL 
            {
              Object RESULT =null;

              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",5, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // literal ::= FLOAT_LITERAL 
            {
              Object RESULT =null;

              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",5, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // literal ::= LONG_LITERAL 
            {
              Object RESULT =null;

              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",5, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // literal ::= BIG_INT_LITERAL 
            {
              Object RESULT =null;

              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",5, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // literal ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",5, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // map ::= LEFT_CURLY s_expr s_expr RIGHT_CURLY 
            {
              Object RESULT =null;

              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("map",1, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-3)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // set ::= SHARP_HAT s_expr RIGHT_CURLY 
            {
              Object RESULT =null;

              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("set",3, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-2)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // vector ::= LEFT_SQUARE s_expr RIGHT_SQUARE 
            {
              Object RESULT =null;

              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("vector",2, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-2)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // list ::= LEFT_PAREN s_expr RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("list",4, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-2)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // series ::= set 
            {
              Object RESULT =null;

              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("series",6, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // series ::= map 
            {
              Object RESULT =null;

              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("series",6, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // series ::= vector 
            {
              Object RESULT =null;

              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("series",6, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // series ::= list 
            {
              Object RESULT =null;

              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("series",6, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // s_expr ::= series 
            {
              Object RESULT =null;

              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("s_expr",0, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s_expr ::= literal 
            {
              Object RESULT =null;

              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("s_expr",0, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s_expr EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).value;
		RESULT = start_val;
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ClojureParser$parser.done_parsing();
          return CUP$ClojureParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

