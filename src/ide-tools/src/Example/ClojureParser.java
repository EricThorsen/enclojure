
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Oct 27 14:28:48 EDT 2009
//----------------------------------------------------

package Example;

import java_cup.runtime.*;
import org.enclojure.flex._Lexer;
import java.io.*;
import org.enclojure.flex.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Oct 27 14:28:48 EDT 2009
  */
public class ClojureParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ClojureParser() {super();}

  /** Constructor which sets the default scanner. */
  public ClojureParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ClojureParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\034\000\002\002\004\000\002\002\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\006\005\000\002\007\004\000" +
    "\002\013\003\000\002\013\003\000\002\004\005\000\002" +
    "\005\006\000\002\003\005\000\002\014\004\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\012\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\044\000\042\026\006\030\016\032\007\036\004\063" +
    "\012\076\020\077\026\100\030\101\023\102\031\103\011" +
    "\104\024\105\015\106\010\107\027\110\032\001\002\000" +
    "\004\032\044\001\002\000\052\002\ufffd\026\ufffd\027\ufffd" +
    "\030\ufffd\031\ufffd\032\ufffd\033\ufffd\036\ufffd\063\ufffd\076" +
    "\ufffd\077\ufffd\100\ufffd\101\ufffd\102\ufffd\103\ufffd\104\ufffd" +
    "\105\ufffd\106\ufffd\107\ufffd\110\ufffd\001\002\000\042\026" +
    "\006\030\016\032\007\036\004\063\012\076\020\077\026" +
    "\100\030\101\023\102\031\103\011\104\024\105\015\106" +
    "\010\107\027\110\032\001\002\000\042\026\006\030\016" +
    "\032\007\036\004\063\012\076\020\077\026\100\030\101" +
    "\023\102\031\103\011\104\024\105\015\106\010\107\027" +
    "\110\032\001\002\000\052\002\uffea\026\uffea\027\uffea\030" +
    "\uffea\031\uffea\032\uffea\033\uffea\036\uffea\063\uffea\076\uffea" +
    "\077\uffea\100\uffea\101\uffea\102\uffea\103\uffea\104\uffea\105" +
    "\uffea\106\uffea\107\uffea\110\uffea\001\002\000\052\002\uffed" +
    "\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed\036" +
    "\uffed\063\uffed\076\uffed\077\uffed\100\uffed\101\uffed\102\uffed" +
    "\103\uffed\104\uffed\105\uffed\106\uffed\107\uffed\110\uffed\001" +
    "\002\000\052\002\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8" +
    "\032\uffe8\033\uffe8\036\uffe8\063\uffe8\076\uffe8\077\uffe8\100" +
    "\uffe8\101\uffe8\102\uffe8\103\uffe8\104\uffe8\105\uffe8\106\uffe8" +
    "\107\uffe8\110\uffe8\001\002\000\052\002\ufffb\026\ufffb\027" +
    "\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb\036\ufffb\063\ufffb" +
    "\076\ufffb\077\ufffb\100\ufffb\101\ufffb\102\ufffb\103\ufffb\104" +
    "\ufffb\105\ufffb\106\ufffb\107\ufffb\110\ufffb\001\002\000\052" +
    "\002\000\026\000\027\000\030\000\031\000\032\000\033" +
    "\000\036\000\063\000\076\000\077\000\100\000\101\000" +
    "\102\000\103\000\104\000\105\000\106\000\107\000\110" +
    "\000\001\002\000\052\002\uffeb\026\uffeb\027\uffeb\030\uffeb" +
    "\031\uffeb\032\uffeb\033\uffeb\036\uffeb\063\uffeb\076\uffeb\077" +
    "\uffeb\100\uffeb\101\uffeb\102\uffeb\103\uffeb\104\uffeb\105\uffeb" +
    "\106\uffeb\107\uffeb\110\uffeb\001\002\000\042\026\006\030" +
    "\016\032\007\036\004\063\012\076\020\077\026\100\030" +
    "\101\023\102\031\103\011\104\024\105\015\106\010\107" +
    "\027\110\032\001\002\000\052\002\uffff\026\uffff\027\uffff" +
    "\030\uffff\031\uffff\032\uffff\033\uffff\036\uffff\063\uffff\076" +
    "\uffff\077\uffff\100\uffff\101\uffff\102\uffff\103\uffff\104\uffff" +
    "\105\uffff\106\uffff\107\uffff\110\uffff\001\002\000\052\002" +
    "\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2" +
    "\036\ufff2\063\ufff2\076\ufff2\077\ufff2\100\ufff2\101\ufff2\102" +
    "\ufff2\103\ufff2\104\ufff2\105\ufff2\106\ufff2\107\ufff2\110\ufff2" +
    "\001\002\000\052\002\ufffe\026\ufffe\027\ufffe\030\ufffe\031" +
    "\ufffe\032\ufffe\033\ufffe\036\ufffe\063\ufffe\076\ufffe\077\ufffe" +
    "\100\ufffe\101\ufffe\102\ufffe\103\ufffe\104\ufffe\105\ufffe\106" +
    "\ufffe\107\ufffe\110\ufffe\001\002\000\004\002\033\001\002" +
    "\000\052\002\uffef\026\uffef\027\uffef\030\uffef\031\uffef\032" +
    "\uffef\033\uffef\036\uffef\063\uffef\076\uffef\077\uffef\100\uffef" +
    "\101\uffef\102\uffef\103\uffef\104\uffef\105\uffef\106\uffef\107" +
    "\uffef\110\uffef\001\002\000\052\002\uffec\026\uffec\027\uffec" +
    "\030\uffec\031\uffec\032\uffec\033\uffec\036\uffec\063\uffec\076" +
    "\uffec\077\uffec\100\uffec\101\uffec\102\uffec\103\uffec\104\uffec" +
    "\105\uffec\106\uffec\107\uffec\110\uffec\001\002\000\052\002" +
    "\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc" +
    "\036\ufffc\063\ufffc\076\ufffc\077\ufffc\100\ufffc\101\ufffc\102" +
    "\ufffc\103\ufffc\104\ufffc\105\ufffc\106\ufffc\107\ufffc\110\ufffc" +
    "\001\002\000\052\002\ufff1\026\ufff1\027\ufff1\030\ufff1\031" +
    "\ufff1\032\ufff1\033\ufff1\036\ufff1\063\ufff1\076\ufff1\077\ufff1" +
    "\100\ufff1\101\ufff1\102\ufff1\103\ufff1\104\ufff1\105\ufff1\106" +
    "\ufff1\107\ufff1\110\ufff1\001\002\000\052\002\uffe9\026\uffe9" +
    "\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\036\uffe9\063" +
    "\uffe9\076\uffe9\077\uffe9\100\uffe9\101\uffe9\102\uffe9\103\uffe9" +
    "\104\uffe9\105\uffe9\106\uffe9\107\uffe9\110\uffe9\001\002\000" +
    "\052\002\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0" +
    "\033\ufff0\036\ufff0\063\ufff0\076\ufff0\077\ufff0\100\ufff0\101" +
    "\ufff0\102\ufff0\103\ufff0\104\ufff0\105\ufff0\106\ufff0\107\ufff0" +
    "\110\ufff0\001\002\000\052\002\uffee\026\uffee\027\uffee\030" +
    "\uffee\031\uffee\032\uffee\033\uffee\036\uffee\063\uffee\076\uffee" +
    "\077\uffee\100\uffee\101\uffee\102\uffee\103\uffee\104\uffee\105" +
    "\uffee\106\uffee\107\uffee\110\uffee\001\002\000\052\002\uffe7" +
    "\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\036" +
    "\uffe7\063\uffe7\076\uffe7\077\uffe7\100\uffe7\101\uffe7\102\uffe7" +
    "\103\uffe7\104\uffe7\105\uffe7\106\uffe7\107\uffe7\110\uffe7\001" +
    "\002\000\004\002\001\001\002\000\004\031\035\001\002" +
    "\000\052\002\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032" +
    "\ufff6\033\ufff6\036\ufff6\063\ufff6\076\ufff6\077\ufff6\100\ufff6" +
    "\101\ufff6\102\ufff6\103\ufff6\104\ufff6\105\ufff6\106\ufff6\107" +
    "\ufff6\110\ufff6\001\002\000\004\033\041\001\002\000\042" +
    "\026\006\030\016\032\007\036\004\063\012\076\020\077" +
    "\026\100\030\101\023\102\031\103\011\104\024\105\015" +
    "\106\010\107\027\110\032\001\002\000\004\033\ufff3\001" +
    "\002\000\052\002\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4" +
    "\032\ufff4\033\ufff4\036\ufff4\063\ufff4\076\ufff4\077\ufff4\100" +
    "\ufff4\101\ufff4\102\ufff4\103\ufff4\104\ufff4\105\ufff4\106\ufff4" +
    "\107\ufff4\110\ufff4\001\002\000\004\027\043\001\002\000" +
    "\052\002\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa" +
    "\033\ufffa\036\ufffa\063\ufffa\076\ufffa\077\ufffa\100\ufffa\101" +
    "\ufffa\102\ufffa\103\ufffa\104\ufffa\105\ufffa\106\ufffa\107\ufffa" +
    "\110\ufffa\001\002\000\042\026\006\030\016\032\007\036" +
    "\004\063\012\076\020\077\026\100\030\101\023\102\031" +
    "\103\011\104\024\105\015\106\010\107\027\110\032\001" +
    "\002\000\004\033\046\001\002\000\052\002\ufff5\026\ufff5" +
    "\027\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5\036\ufff5\063" +
    "\ufff5\076\ufff5\077\ufff5\100\ufff5\101\ufff5\102\ufff5\103\ufff5" +
    "\104\ufff5\105\ufff5\106\ufff5\107\ufff5\110\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\044\000\020\002\021\003\024\004\004\005\012\006" +
    "\020\010\016\015\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\002\041\003\024\004\004\005\012\006" +
    "\020\010\016\015\013\001\001\000\022\002\036\003\024" +
    "\004\004\005\012\006\020\010\016\014\035\015\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\002\033\003\024\004\004\005\012\006\020\010\016" +
    "\015\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\002\037\003\024\004\004\005\012" +
    "\006\020\010\016\015\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\002\044\003\024\004\004\005\012\006\020\010\016\015" +
    "\013\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ClojureParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ClojureParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ClojureParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static void main(String args[]) throws Exception {
		if (args.length==0) 
		{
		new ClojureParser(new _Lexer(System.in)).parse();
		}
		else
		{ 
		new ClojureParser(new _Lexer(new java.io.FileInputStream(args[0]))).parse();
		}
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ClojureParser$actions {
  private final ClojureParser parser;

  /** Constructor */
  CUP$ClojureParser$actions(ClojureParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ClojureParser$do_action(
    int                        CUP$ClojureParser$act_num,
    java_cup.runtime.lr_parser CUP$ClojureParser$parser,
    java.util.Stack            CUP$ClojureParser$stack,
    int                        CUP$ClojureParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ClojureParser$result;

      /* select the action based on the action number */
      switch (CUP$ClojureParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // empty ::= 
            {
              Object RESULT =null;

              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("empty",8, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // literal ::= NULL_LITERAL 
            {
              Object RESULT =null;

              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",6, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // literal ::= KEYWORD 
            {
              Object RESULT =null;

              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",6, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // literal ::= WRONG_STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",6, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // literal ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",6, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // literal ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",6, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // literal ::= RATIO 
            {
              Object RESULT =null;

              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",6, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // literal ::= BIG_DECIMAL_LITERAL 
            {
              Object RESULT =null;

              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",6, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // literal ::= DOUBLE_LITERAL 
            {
              Object RESULT =null;

              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",6, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // literal ::= FLOAT_LITERAL 
            {
              Object RESULT =null;

              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",6, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // literal ::= LONG_LITERAL 
            {
              Object RESULT =null;

              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",6, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // literal ::= BIG_INT_LITERAL 
            {
              Object RESULT =null;

              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",6, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // literal ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",6, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // pair_expr ::= s_expr s_expr 
            {
              Object RESULT =null;

              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("pair_expr",10, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // map ::= LEFT_CURLY pair_expr RIGHT_CURLY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).value;
		 System.out.println("map {" + e +"}"); 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("map",1, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-2)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // set ::= SHARP LEFT_CURLY s_expr RIGHT_CURLY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).value;
		 System.out.println("set #{" + e +"}"); 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("set",3, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-3)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // vector ::= LEFT_SQUARE s_expr RIGHT_SQUARE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).value;
		 System.out.println("vector [" + e +"]"); 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("vector",2, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-2)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // list_expr ::= list 
            {
              Object RESULT =null;

              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("list_expr",9, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // list_expr ::= empty_list 
            {
              Object RESULT =null;

              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("list_expr",9, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // empty_list ::= LEFT_PAREN RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("empty_list",5, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // list ::= LEFT_PAREN s_expr RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("list",4, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-2)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr_part ::= set 
            {
              Object RESULT =null;

              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("expr_part",11, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr_part ::= map 
            {
              Object RESULT =null;

              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("expr_part",11, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr_part ::= vector 
            {
              Object RESULT =null;

              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("expr_part",11, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr_part ::= list 
            {
              Object RESULT =null;

              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("expr_part",11, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr_part ::= literal 
            {
              Object RESULT =null;

              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("expr_part",11, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s_expr ::= expr_part 
            {
              Object RESULT =null;

              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("s_expr",0, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s_expr EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).value;
		RESULT = start_val;
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ClojureParser$parser.done_parsing();
          return CUP$ClojureParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

