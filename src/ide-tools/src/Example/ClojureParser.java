
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Nov 07 22:06:31 EST 2009
//----------------------------------------------------

package Example;

import java_cup.runtime.*;
import org.enclojure.flex._Lexer;
import java.io.*;
import org.enclojure.flex.*;
import clojure.lang.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Nov 07 22:06:31 EST 2009
  */
public class ClojureParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ClojureParser() {super();}

  /** Constructor which sets the default scanner. */
  public ClojureParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ClojureParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\057\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\021\003\000" +
    "\002\020\004\000\002\020\003\000\002\011\005\000\002" +
    "\011\004\000\002\007\005\000\002\007\004\000\002\010" +
    "\005\000\002\010\004\000\002\005\004\000\002\006\004" +
    "\000\002\006\003\000\002\004\005\000\002\004\004\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\025\003\000" +
    "\002\024\005\000\002\024\003\000\002\023\005\000\002" +
    "\023\003\000\002\026\004\000\002\026\004\000\002\022" +
    "\004\000\002\022\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\016\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\075\000\046\026\007\030\026\032\010\035\012\041" +
    "\035\107\021\120\005\122\030\123\036\124\041\125\033" +
    "\126\042\127\020\130\034\131\024\132\015\133\040\134" +
    "\043\001\002\000\050\002\ufffe\026\ufffe\030\ufffe\032\ufffe" +
    "\035\ufffe\041\ufffe\107\ufffe\120\ufffe\122\ufffe\123\ufffe\124" +
    "\ufffe\125\ufffe\126\ufffe\127\ufffe\130\ufffe\131\ufffe\132\ufffe" +
    "\133\ufffe\134\ufffe\001\002\000\062\002\uffdf\026\uffdf\027" +
    "\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\035\uffdf\041\uffdf" +
    "\107\uffdf\116\uffdf\117\uffdf\120\uffdf\122\uffdf\123\uffdf\124" +
    "\uffdf\125\uffdf\126\uffdf\127\uffdf\130\uffdf\131\uffdf\132\uffdf" +
    "\133\uffdf\134\uffdf\001\002\000\056\002\ufffc\026\ufffc\027" +
    "\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc\035\ufffc\041\ufffc" +
    "\107\ufffc\120\ufffc\122\ufffc\123\ufffc\124\ufffc\125\ufffc\126" +
    "\ufffc\127\ufffc\130\ufffc\131\ufffc\132\ufffc\133\ufffc\134\ufffc" +
    "\001\002\000\050\026\007\027\076\030\026\032\010\035" +
    "\012\041\035\107\021\120\005\122\030\123\036\124\041" +
    "\125\033\126\042\127\020\130\034\131\024\132\015\133" +
    "\040\134\043\001\002\000\050\026\007\030\026\032\010" +
    "\033\071\035\012\041\035\107\021\120\005\122\030\123" +
    "\036\124\041\125\033\126\042\127\020\130\034\131\024" +
    "\132\015\133\040\134\043\001\002\000\056\002\uffd7\026" +
    "\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\035\uffd7" +
    "\041\uffd7\107\uffd7\120\uffd7\122\uffd7\123\uffd7\124\uffd7\125" +
    "\uffd7\126\uffd7\127\uffd7\130\uffd7\131\uffd7\132\uffd7\133\uffd7" +
    "\134\uffd7\001\002\000\006\120\005\132\065\001\002\000" +
    "\056\002\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6" +
    "\033\uffd6\035\uffd6\041\uffd6\107\uffd6\120\uffd6\122\uffd6\123" +
    "\uffd6\124\uffd6\125\uffd6\126\uffd6\127\uffd6\130\uffd6\131\uffd6" +
    "\132\uffd6\133\uffd6\134\uffd6\001\002\000\062\002\uffdd\026" +
    "\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\035\uffdd" +
    "\041\uffdd\107\uffdd\116\uffdd\117\uffdd\120\uffdd\122\uffdd\123" +
    "\uffdd\124\uffdd\125\uffdd\126\uffdd\127\uffdd\130\uffdd\131\uffdd" +
    "\132\uffdd\133\uffdd\134\uffdd\001\002\000\056\002\uffe3\026" +
    "\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\035\uffe3" +
    "\041\uffe3\107\uffe3\120\uffe3\122\uffe3\123\uffe3\124\uffe3\125" +
    "\uffe3\126\uffe3\127\uffe3\130\uffe3\131\uffe3\132\uffe3\133\uffe3" +
    "\134\uffe3\001\002\000\062\002\uffdb\026\uffdb\027\uffdb\030" +
    "\uffdb\031\uffdb\032\uffdb\033\uffdb\035\uffdb\041\uffdb\107\uffdb" +
    "\116\061\117\060\120\uffdb\122\uffdb\123\uffdb\124\uffdb\125" +
    "\uffdb\126\uffdb\127\uffdb\130\uffdb\131\uffdb\132\uffdb\133\uffdb" +
    "\134\uffdb\001\002\000\004\120\005\001\002\000\056\002" +
    "\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6" +
    "\035\uffe6\041\uffe6\107\uffe6\120\uffe6\122\uffe6\123\uffe6\124" +
    "\uffe6\125\uffe6\126\uffe6\127\uffe6\130\uffe6\131\uffe6\132\uffe6" +
    "\133\uffe6\134\uffe6\001\002\000\056\002\uffe1\026\uffe1\027" +
    "\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\035\uffe1\041\uffe1" +
    "\107\uffe1\120\uffe1\122\uffe1\123\uffe1\124\uffe1\125\uffe1\126" +
    "\uffe1\127\uffe1\130\uffe1\131\uffe1\132\uffe1\133\uffe1\134\uffe1" +
    "\001\002\000\056\002\ufffa\026\ufffa\027\ufffa\030\ufffa\031" +
    "\ufffa\032\ufffa\033\ufffa\035\ufffa\041\ufffa\107\ufffa\120\ufffa" +
    "\122\ufffa\123\ufffa\124\ufffa\125\ufffa\126\ufffa\127\ufffa\130" +
    "\ufffa\131\ufffa\132\ufffa\133\ufffa\134\ufffa\001\002\000\050" +
    "\002\000\026\007\030\026\032\010\035\012\041\035\107" +
    "\021\120\005\122\030\123\036\124\041\125\033\126\042" +
    "\127\020\130\034\131\024\132\015\133\040\134\043\001" +
    "\002\000\056\002\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4" +
    "\032\uffe4\033\uffe4\035\uffe4\041\uffe4\107\uffe4\120\uffe4\122" +
    "\uffe4\123\uffe4\124\uffe4\125\uffe4\126\uffe4\127\uffe4\130\uffe4" +
    "\131\uffe4\132\uffe4\133\uffe4\134\uffe4\001\002\000\056\002" +
    "\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4" +
    "\035\uffd4\041\uffd4\107\uffd4\120\uffd4\122\uffd4\123\uffd4\124" +
    "\uffd4\125\uffd4\126\uffd4\127\uffd4\130\uffd4\131\uffd4\132\uffd4" +
    "\133\uffd4\134\uffd4\001\002\000\050\026\007\030\026\031" +
    "\053\032\010\035\012\041\035\107\021\120\005\122\030" +
    "\123\036\124\041\125\033\126\042\127\020\130\034\131" +
    "\024\132\015\133\040\134\043\001\002\000\056\002\uffd5" +
    "\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\035" +
    "\uffd5\041\uffd5\107\uffd5\120\uffd5\122\uffd5\123\uffd5\124\uffd5" +
    "\125\uffd5\126\uffd5\127\uffd5\130\uffd5\131\uffd5\132\uffd5\133" +
    "\uffd5\134\uffd5\001\002\000\056\002\uffeb\026\uffeb\027\uffeb" +
    "\030\uffeb\031\uffeb\032\uffeb\033\uffeb\035\uffeb\041\uffeb\107" +
    "\uffeb\120\uffeb\122\uffeb\123\uffeb\124\uffeb\125\uffeb\126\uffeb" +
    "\127\uffeb\130\uffeb\131\uffeb\132\uffeb\133\uffeb\134\uffeb\001" +
    "\002\000\056\002\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd" +
    "\032\ufffd\033\ufffd\035\ufffd\041\ufffd\107\ufffd\120\ufffd\122" +
    "\ufffd\123\ufffd\124\ufffd\125\ufffd\126\ufffd\127\ufffd\130\ufffd" +
    "\131\ufffd\132\ufffd\133\ufffd\134\ufffd\001\002\000\004\002" +
    "\052\001\002\000\056\002\uffe8\026\uffe8\027\uffe8\030\uffe8" +
    "\031\uffe8\032\uffe8\033\uffe8\035\uffe8\041\uffe8\107\uffe8\120" +
    "\uffe8\122\uffe8\123\uffe8\124\uffe8\125\uffe8\126\uffe8\127\uffe8" +
    "\130\uffe8\131\uffe8\132\uffe8\133\uffe8\134\uffe8\001\002\000" +
    "\056\002\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5" +
    "\033\uffe5\035\uffe5\041\uffe5\107\uffe5\120\uffe5\122\uffe5\123" +
    "\uffe5\124\uffe5\125\uffe5\126\uffe5\127\uffe5\130\uffe5\131\uffe5" +
    "\132\uffe5\133\uffe5\134\uffe5\001\002\000\050\026\007\030" +
    "\026\032\010\033\047\035\012\041\035\107\021\120\005" +
    "\122\030\123\036\124\041\125\033\126\042\127\020\130" +
    "\034\131\024\132\015\133\040\134\043\001\002\000\056" +
    "\002\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033" +
    "\uffea\035\uffea\041\uffea\107\uffea\120\uffea\122\uffea\123\uffea" +
    "\124\uffea\125\uffea\126\uffea\127\uffea\130\uffea\131\uffea\132" +
    "\uffea\133\uffea\134\uffea\001\002\000\056\002\ufffb\026\ufffb" +
    "\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb\035\ufffb\041" +
    "\ufffb\107\ufffb\120\ufffb\122\ufffb\123\ufffb\124\ufffb\125\ufffb" +
    "\126\ufffb\127\ufffb\130\ufffb\131\ufffb\132\ufffb\133\ufffb\134" +
    "\ufffb\001\002\000\056\002\uffe2\026\uffe2\027\uffe2\030\uffe2" +
    "\031\uffe2\032\uffe2\033\uffe2\035\uffe2\041\uffe2\107\uffe2\120" +
    "\uffe2\122\uffe2\123\uffe2\124\uffe2\125\uffe2\126\uffe2\127\uffe2" +
    "\130\uffe2\131\uffe2\132\uffe2\133\uffe2\134\uffe2\001\002\000" +
    "\056\002\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9" +
    "\033\uffe9\035\uffe9\041\uffe9\107\uffe9\120\uffe9\122\uffe9\123" +
    "\uffe9\124\uffe9\125\uffe9\126\uffe9\127\uffe9\130\uffe9\131\uffe9" +
    "\132\uffe9\133\uffe9\134\uffe9\001\002\000\056\002\uffe7\026" +
    "\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\035\uffe7" +
    "\041\uffe7\107\uffe7\120\uffe7\122\uffe7\123\uffe7\124\uffe7\125" +
    "\uffe7\126\uffe7\127\uffe7\130\uffe7\131\uffe7\132\uffe7\133\uffe7" +
    "\134\uffe7\001\002\000\056\002\uffe0\026\uffe0\027\uffe0\030" +
    "\uffe0\031\uffe0\032\uffe0\033\uffe0\035\uffe0\041\uffe0\107\uffe0" +
    "\120\uffe0\122\uffe0\123\uffe0\124\uffe0\125\uffe0\126\uffe0\127" +
    "\uffe0\130\uffe0\131\uffe0\132\uffe0\133\uffe0\134\uffe0\001\002" +
    "\000\054\026\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9\033" +
    "\ufff9\035\ufff9\041\ufff9\107\ufff9\120\ufff9\122\ufff9\123\ufff9" +
    "\124\ufff9\125\ufff9\126\ufff9\127\ufff9\130\ufff9\131\ufff9\132" +
    "\ufff9\133\ufff9\134\ufff9\001\002\000\050\026\007\030\026" +
    "\032\010\033\051\035\012\041\035\107\021\120\005\122" +
    "\030\123\036\124\041\125\033\126\042\127\020\130\034" +
    "\131\024\132\015\133\040\134\043\001\002\000\054\026" +
    "\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\035\ufff7" +
    "\041\ufff7\107\ufff7\120\ufff7\122\ufff7\123\ufff7\124\ufff7\125" +
    "\ufff7\126\ufff7\127\ufff7\130\ufff7\131\ufff7\132\ufff7\133\ufff7" +
    "\134\ufff7\001\002\000\056\002\ufff1\026\ufff1\027\ufff1\030" +
    "\ufff1\031\ufff1\032\ufff1\033\ufff1\035\ufff1\041\ufff1\107\ufff1" +
    "\120\ufff1\122\ufff1\123\ufff1\124\ufff1\125\ufff1\126\ufff1\127" +
    "\ufff1\130\ufff1\131\ufff1\132\ufff1\133\ufff1\134\ufff1\001\002" +
    "\000\054\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\033" +
    "\ufff8\035\ufff8\041\ufff8\107\ufff8\120\ufff8\122\ufff8\123\ufff8" +
    "\124\ufff8\125\ufff8\126\ufff8\127\ufff8\130\ufff8\131\ufff8\132" +
    "\ufff8\133\ufff8\134\ufff8\001\002\000\056\002\ufff2\026\ufff2" +
    "\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\035\ufff2\041" +
    "\ufff2\107\ufff2\120\ufff2\122\ufff2\123\ufff2\124\ufff2\125\ufff2" +
    "\126\ufff2\127\ufff2\130\ufff2\131\ufff2\132\ufff2\133\ufff2\134" +
    "\ufff2\001\002\000\004\002\001\001\002\000\056\002\ufff3" +
    "\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\035" +
    "\ufff3\041\ufff3\107\ufff3\120\ufff3\122\ufff3\123\ufff3\124\ufff3" +
    "\125\ufff3\126\ufff3\127\ufff3\130\ufff3\131\ufff3\132\ufff3\133" +
    "\ufff3\134\ufff3\001\002\000\050\026\007\030\026\031\055" +
    "\032\010\035\012\041\035\107\021\120\005\122\030\123" +
    "\036\124\041\125\033\126\042\127\020\130\034\131\024" +
    "\132\015\133\040\134\043\001\002\000\056\002\ufff4\026" +
    "\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4\035\ufff4" +
    "\041\ufff4\107\ufff4\120\ufff4\122\ufff4\123\ufff4\124\ufff4\125" +
    "\ufff4\126\ufff4\127\ufff4\130\ufff4\131\ufff4\132\ufff4\133\ufff4" +
    "\134\ufff4\001\002\000\050\002\uffff\026\uffff\030\uffff\032" +
    "\uffff\035\uffff\041\uffff\107\uffff\120\uffff\122\uffff\123\uffff" +
    "\124\uffff\125\uffff\126\uffff\127\uffff\130\uffff\131\uffff\132" +
    "\uffff\133\uffff\134\uffff\001\002\000\056\002\uffd8\026\uffd8" +
    "\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\035\uffd8\041" +
    "\uffd8\107\uffd8\120\uffd8\122\uffd8\123\uffd8\124\uffd8\125\uffd8" +
    "\126\uffd8\127\uffd8\130\uffd8\131\uffd8\132\uffd8\133\uffd8\134" +
    "\uffd8\001\002\000\004\120\063\001\002\000\004\120\005" +
    "\001\002\000\062\002\uffde\026\uffde\027\uffde\030\uffde\031" +
    "\uffde\032\uffde\033\uffde\035\uffde\041\uffde\107\uffde\116\uffde" +
    "\117\uffde\120\uffde\122\uffde\123\uffde\124\uffde\125\uffde\126" +
    "\uffde\127\uffde\130\uffde\131\uffde\132\uffde\133\uffde\134\uffde" +
    "\001\002\000\056\002\uffdc\026\uffdc\027\uffdc\030\uffdc\031" +
    "\uffdc\032\uffdc\033\uffdc\035\uffdc\041\uffdc\107\uffdc\120\uffdc" +
    "\122\uffdc\123\uffdc\124\uffdc\125\uffdc\126\uffdc\127\uffdc\130" +
    "\uffdc\131\uffdc\132\uffdc\133\uffdc\134\uffdc\001\002\000\004" +
    "\120\uffd9\001\002\000\004\120\uffda\001\002\000\050\026" +
    "\uffee\030\uffee\032\uffee\033\uffee\035\uffee\041\uffee\107\uffee" +
    "\120\uffee\122\uffee\123\uffee\124\uffee\125\uffee\126\uffee\127" +
    "\uffee\130\uffee\131\uffee\132\uffee\133\uffee\134\uffee\001\002" +
    "\000\046\026\007\030\026\032\010\035\012\041\035\107" +
    "\021\120\005\122\030\123\036\124\041\125\033\126\042" +
    "\127\020\130\034\131\024\132\015\133\040\134\043\001" +
    "\002\000\050\026\007\030\026\032\010\033\073\035\012" +
    "\041\035\107\021\120\005\122\030\123\036\124\041\125" +
    "\033\126\042\127\020\130\034\131\024\132\015\133\040" +
    "\134\043\001\002\000\056\002\uffec\026\uffec\027\uffec\030" +
    "\uffec\031\uffec\032\uffec\033\uffec\035\uffec\041\uffec\107\uffec" +
    "\120\uffec\122\uffec\123\uffec\124\uffec\125\uffec\126\uffec\127" +
    "\uffec\130\uffec\131\uffec\132\uffec\133\uffec\134\uffec\001\002" +
    "\000\050\026\uffef\030\uffef\032\uffef\033\uffef\035\uffef\041" +
    "\uffef\107\uffef\120\uffef\122\uffef\123\uffef\124\uffef\125\uffef" +
    "\126\uffef\127\uffef\130\uffef\131\uffef\132\uffef\133\uffef\134" +
    "\uffef\001\002\000\056\002\uffed\026\uffed\027\uffed\030\uffed" +
    "\031\uffed\032\uffed\033\uffed\035\uffed\041\uffed\107\uffed\120" +
    "\uffed\122\uffed\123\uffed\124\uffed\125\uffed\126\uffed\127\uffed" +
    "\130\uffed\131\uffed\132\uffed\133\uffed\134\uffed\001\002\000" +
    "\050\026\ufff0\030\ufff0\032\ufff0\033\ufff0\035\ufff0\041\ufff0" +
    "\107\ufff0\120\ufff0\122\ufff0\123\ufff0\124\ufff0\125\ufff0\126" +
    "\ufff0\127\ufff0\130\ufff0\131\ufff0\132\ufff0\133\ufff0\134\ufff0" +
    "\001\002\000\050\026\007\027\077\030\026\032\010\035" +
    "\012\041\035\107\021\120\005\122\030\123\036\124\041" +
    "\125\033\126\042\127\020\130\034\131\024\132\015\133" +
    "\040\134\043\001\002\000\056\002\ufff5\026\ufff5\027\ufff5" +
    "\030\ufff5\031\ufff5\032\ufff5\033\ufff5\035\ufff5\041\ufff5\107" +
    "\ufff5\120\ufff5\122\ufff5\123\ufff5\124\ufff5\125\ufff5\126\ufff5" +
    "\127\ufff5\130\ufff5\131\ufff5\132\ufff5\133\ufff5\134\ufff5\001" +
    "\002\000\056\002\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6" +
    "\032\ufff6\033\ufff6\035\ufff6\041\ufff6\107\ufff6\120\ufff6\122" +
    "\ufff6\123\ufff6\124\ufff6\125\ufff6\126\ufff6\127\ufff6\130\ufff6" +
    "\131\ufff6\132\ufff6\133\ufff6\134\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\075\000\036\002\031\003\022\004\036\007\005\010" +
    "\021\011\030\014\026\015\012\017\003\022\024\023\010" +
    "\024\015\025\013\026\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\004\036\007\005" +
    "\010\021\011\030\014\026\015\012\017\043\020\074\021" +
    "\045\022\024\023\010\024\015\025\013\026\016\001\001" +
    "\000\040\004\036\005\065\006\067\007\005\010\021\011" +
    "\030\014\026\015\012\017\043\021\066\022\024\023\010" +
    "\024\015\025\013\026\016\001\001\000\002\001\001\000" +
    "\010\023\063\024\015\025\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\023\056\024\015\025\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\004\036\007" +
    "\005\010\021\011\030\014\026\015\012\017\055\022\024" +
    "\023\010\024\015\025\013\026\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\004\036\007\005\010\021" +
    "\011\030\014\026\015\012\017\043\020\053\021\045\022" +
    "\024\023\010\024\015\025\013\026\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\004\036" +
    "\007\005\010\021\011\030\014\026\015\012\017\043\020" +
    "\044\021\045\022\024\023\010\024\015\025\013\026\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\004\036\007\005\010\021\011" +
    "\030\014\026\015\012\017\043\021\047\022\024\023\010" +
    "\024\015\025\013\026\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\004\036\007\005\010" +
    "\021\011\030\014\026\015\012\017\043\021\047\022\024" +
    "\023\010\024\015\025\013\026\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\004\036\007\005\010\021\011\030\014\026\015" +
    "\012\017\043\021\073\022\024\023\010\024\015\025\013" +
    "\026\016\001\001\000\036\004\036\005\071\007\005\010" +
    "\021\011\030\014\026\015\012\017\043\021\066\022\024" +
    "\023\010\024\015\025\013\026\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\004\036\007\005\010\021\011\030\014\026\015" +
    "\012\017\043\021\047\022\024\023\010\024\015\025\013" +
    "\026\016\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ClojureParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ClojureParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ClojureParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static void main(String args[]) throws Exception {
		if (args.length==0) 
		{
		new ClojureParser(new _Lexer(System.in)).parse();
		}
		else
		{ 
		new ClojureParser(new _Lexer(new java.io.FileInputStream(args[0]))).parse();
		}
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ClojureParser$actions {
  private final ClojureParser parser;

  /** Constructor */
  CUP$ClojureParser$actions(ClojureParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ClojureParser$do_action(
    int                        CUP$ClojureParser$act_num,
    java_cup.runtime.lr_parser CUP$ClojureParser$parser,
    java.util.Stack            CUP$ClojureParser$stack,
    int                        CUP$ClojureParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ClojureParser$result;

      /* select the action based on the action number */
      switch (CUP$ClojureParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // empty ::= 
            {
              Object RESULT =null;

              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("empty",12, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // atom ::= symbol 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("atom",13, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // atom ::= literal 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("atom",13, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // atom ::= series 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("atom",13, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // symbol ::= symbol_part 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		
        RESULT = e;
        
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("symbol",16, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // symbol ::= type_hint symbol_part 
            {
              Object RESULT =null;
		int hintleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).left;
		int hintright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).right;
		Object hint = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		
                clojure.lang.Symbol t = clojure.lang.Symbol.create("user",(String)e);                
                t = (clojure.lang.Symbol)t.withMeta (RT.map(Keyword.intern("tag"),hint));
		RESULT = t;
		System.out.println("DISP_META STRING_LITERAL " + e);
		
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("symbol",16, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // type_hint ::= DISP_META symbol_part 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		
		RESULT = e;
		System.out.println("DISP_META symbol_part " + e);
		
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("type_hint",20, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // type_hint ::= DISP_META STRING_LITERAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		
		RESULT = e;
		System.out.println("DISP_META STRING_LITERAL " + e);
		
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("type_hint",20, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // symbol_part ::= q_name 
            {
              Object RESULT =null;
		int symleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int symright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		
		RESULT = clojure.lang.Symbol.create((String)sym);
		System.out.println("symbol "+ sym);
		
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("symbol_part",17, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // symbol_part ::= q_name symNS_SEP symATOM 
            {
              Object RESULT =null;
		int nsleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-2)).left;
		int nsright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-2)).right;
		Object ns = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-2)).value;
		int symleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int symright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		
		RESULT = clojure.lang.Symbol.create((String)ns,(String)sym);
		System.out.println("symbol " + ns + "/" + sym);
		
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("symbol_part",17, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-2)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // q_name ::= q_name_part 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("q_name",18, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // q_name ::= q_name symDOT q_name_part 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = ((String)e1) + "." + ((String)e2); 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("q_name",18, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-2)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // q_name_part ::= symATOM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("q_name_part",19, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // literal ::= NULL_LITERAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = RT.readString((String)e); 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",10, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // literal ::= KEYWORD 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = RT.readString((String)e); 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",10, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // literal ::= WRONG_STRING_LITERAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = RT.readString((String)e); 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",10, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // literal ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = RT.readString((String)e); 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",10, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // literal ::= CHAR_LITERAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = RT.readString((String)e); 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",10, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // literal ::= RATIO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = RT.readString((String)e); 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",10, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // literal ::= BIG_DECIMAL_LITERAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = RT.readString((String)e); 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",10, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // literal ::= DOUBLE_LITERAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = RT.readString((String)e); 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",10, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // literal ::= FLOAT_LITERAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = RT.readString((String)e); 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",10, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // literal ::= LONG_LITERAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = RT.readString((String)e); 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",10, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // literal ::= BIG_INT_LITERAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = RT.readString((String)e); 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",10, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // literal ::= INTEGER_LITERAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = RT.readString((String)e); 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("literal",10, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // map ::= LEFT_CURLY RIGHT_CURLY 
            {
              Object RESULT =null;
		 RESULT = RT.map(); 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("map",2, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // map ::= LEFT_CURLY map_entries RIGHT_CURLY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).value;
		
 		RESULT = e;
		System.out.println("map " + e );
        
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("map",2, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-2)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // map_entries ::= map_entry 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("map_entries",4, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // map_entries ::= map_entries map_entry 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 	RESULT = RT.map(e1,e2); 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("map_entries",4, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // map_entry ::= operand operand 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 	RESULT = RT.map(e1,e2); 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("map_entry",3, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // set ::= DISP_SET RIGHT_CURLY 
            {
              Object RESULT =null;
		 RESULT = RT.set(); 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("set",6, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // set ::= DISP_SET operands RIGHT_CURLY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).value;
		 
		RESULT = RT.set (e); 
		System.out.println("set #{" + e +"}"); 
	
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("set",6, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-2)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // vector ::= LEFT_SQUARE RIGHT_SQUARE 
            {
              Object RESULT =null;
		 RESULT = RT.vector(); 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("vector",5, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // vector ::= LEFT_SQUARE operands RIGHT_SQUARE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).value;
		
 		RESULT = RT.vector(e);
		System.out.println("vector [" + e +"]"); 
	
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("vector",5, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-2)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // list ::= LEFT_PAREN RIGHT_PAREN 
            {
              Object RESULT =null;
		 RESULT = RT.list(); 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("list",7, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // list ::= LEFT_PAREN operands RIGHT_PAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).value;
		 
		System.out.println("list [" + e +"]");
		RESULT = RT.list (e); 
		
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("list",7, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-2)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // operands ::= operand 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 
		System.out.println("operand " + e ); 
		RESULT = e; 
		
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("operands",14, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // operands ::= operands operand 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		
	if (e1 instanceof IPersistentCollection)
	{
		System.out.println("operands:conj " + e1 + "," + e2);
		RESULT = RT.conj((IPersistentCollection)e1,e2);
	} else
	{
	System.out.println("operands:vec " + e1 + "," + e2);
	RESULT = RT.vector(e1,e2);
	} 
	
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("operands",14, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // operand ::= atom 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		RESULT = e; 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("operand",15, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // series ::= set 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("series",11, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // series ::= map 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("series",11, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // series ::= vector 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("series",11, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // series ::= list 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("series",11, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr_part ::= atom 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("expr_part",1, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr_part ::= expr_part atom 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		
			if (e1 instanceof IPersistentCollection)
				RESULT = RT.conj((IPersistentCollection)e1,e2);
			RESULT = RT.vector(e1,e2); 
			
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("expr_part",1, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s_expr ::= expr_part 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("s_expr",0, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          return CUP$ClojureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s_expr EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)).value;
		RESULT = start_val;
              CUP$ClojureParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.elementAt(CUP$ClojureParser$top-1)), ((java_cup.runtime.Symbol)CUP$ClojureParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ClojureParser$parser.done_parsing();
          return CUP$ClojureParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

