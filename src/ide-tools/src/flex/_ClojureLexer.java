/* The following code was generated by JFlex 1.4.3 on 10/20/09 9:29 PM */

/*
(comment
*
*    Copyright (c) ThorTech, L.L.C.. All rights reserved.
*    The use and distribution terms for this software are covered by the
*    Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
*    which can be found in the file epl-v10.html at the root of this distribution.
*    By using this software in any fashion, you are agreeing to be bound by
*    the terms of this license.
*    You must not remove this notice, or any other, from this software.
*
*    Author: Eric Thorsen
)
 */
package org.enclojure.ide_tools;

import java.util.*;
import java.io.CharArrayReader;
import clojure.lang.IPersistentMap;
import clojure.lang.RT;
import clojure.lang.IFn;
import clojure.lang.Var;
import clojure.lang.Keyword;
import clojure.lang.LispReader;
import clojure.lang.Symbol;
import java.util.regex.Pattern;
import java_cup.runtime.*;
import flex.ClojureSym;
import sym;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/20/09 9:29 PM from the specification file
 * <tt>../../../enclojure/src/ide-tools/src/flex/clojure.flex</tt>
 */
public class _ClojureLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int SYMBOL = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\1\1\0\1\3\1\1\22\0\1\2\1\55\1\52"+
    "\1\36\1\51\1\40\1\41\1\34\1\26\1\27\1\55\1\21\1\4"+
    "\1\21\1\24\1\25\1\22\2\6\1\6\1\6\2\6\1\6\2\6"+
    "\1\56\1\54\1\55\1\55\1\55\1\55\1\43\3\5\1\16\1\20"+
    "\1\11\1\7\1\51\1\15\2\51\1\13\13\51\1\23\2\51\1\30"+
    "\1\44\1\31\1\37\1\51\1\35\1\57\1\5\1\5\1\16\1\17"+
    "\1\10\1\7\1\51\1\14\2\51\1\12\1\51\1\46\3\51\1\47"+
    "\1\60\1\50\1\53\2\51\1\23\2\51\1\32\1\0\1\33\1\42"+
    "\43\0\4\45\4\0\1\45\12\0\1\45\4\0\1\45\5\0\27\45"+
    "\1\0\37\45\1\0\u013f\45\31\0\162\45\4\0\14\45\16\0\5\45"+
    "\11\0\1\45\213\0\1\45\13\0\1\45\1\0\3\45\1\0\1\45"+
    "\1\0\24\45\1\0\54\45\1\0\46\45\1\0\5\45\4\0\202\45"+
    "\10\0\105\45\1\0\46\45\2\0\2\45\6\0\20\45\41\0\46\45"+
    "\2\0\1\45\7\0\47\45\110\0\33\45\5\0\3\45\56\0\32\45"+
    "\5\0\13\45\43\0\2\45\1\0\143\45\1\0\1\45\17\0\2\45"+
    "\7\0\2\45\12\0\3\45\2\0\1\45\20\0\1\45\1\0\36\45"+
    "\35\0\3\45\60\0\46\45\13\0\1\45\u0152\0\66\45\3\0\1\45"+
    "\22\0\1\45\7\0\12\45\43\0\10\45\2\0\2\45\2\0\26\45"+
    "\1\0\7\45\1\0\1\45\3\0\4\45\3\0\1\45\36\0\2\45"+
    "\1\0\3\45\16\0\4\45\21\0\6\45\4\0\2\45\2\0\26\45"+
    "\1\0\7\45\1\0\2\45\1\0\2\45\1\0\2\45\37\0\4\45"+
    "\1\0\1\45\23\0\3\45\20\0\11\45\1\0\3\45\1\0\26\45"+
    "\1\0\7\45\1\0\2\45\1\0\5\45\3\0\1\45\22\0\1\45"+
    "\17\0\2\45\17\0\1\45\23\0\10\45\2\0\2\45\2\0\26\45"+
    "\1\0\7\45\1\0\2\45\1\0\5\45\3\0\1\45\36\0\2\45"+
    "\1\0\3\45\17\0\1\45\21\0\1\45\1\0\6\45\3\0\3\45"+
    "\1\0\4\45\3\0\2\45\1\0\1\45\1\0\2\45\3\0\2\45"+
    "\3\0\3\45\3\0\10\45\1\0\3\45\77\0\1\45\13\0\10\45"+
    "\1\0\3\45\1\0\27\45\1\0\12\45\1\0\5\45\46\0\2\45"+
    "\43\0\10\45\1\0\3\45\1\0\27\45\1\0\12\45\1\0\5\45"+
    "\3\0\1\45\40\0\1\45\1\0\2\45\43\0\10\45\1\0\3\45"+
    "\1\0\27\45\1\0\20\45\46\0\2\45\43\0\22\45\3\0\30\45"+
    "\1\0\11\45\1\0\1\45\2\0\7\45\72\0\60\45\1\0\2\45"+
    "\13\0\10\45\72\0\2\45\1\0\1\45\2\0\2\45\1\0\1\45"+
    "\2\0\1\45\6\0\4\45\1\0\7\45\1\0\3\45\1\0\1\45"+
    "\1\0\1\45\2\0\2\45\1\0\4\45\1\0\2\45\11\0\1\45"+
    "\2\0\5\45\1\0\1\45\25\0\2\45\42\0\1\45\77\0\10\45"+
    "\1\0\42\45\35\0\4\45\164\0\42\45\1\0\5\45\1\0\2\45"+
    "\45\0\6\45\112\0\46\45\12\0\51\45\7\0\132\45\5\0\104\45"+
    "\5\0\122\45\6\0\7\45\1\0\77\45\1\0\1\45\1\0\4\45"+
    "\2\0\7\45\1\0\1\45\1\0\4\45\2\0\47\45\1\0\1\45"+
    "\1\0\4\45\2\0\37\45\1\0\1\45\1\0\4\45\2\0\7\45"+
    "\1\0\1\45\1\0\4\45\2\0\7\45\1\0\7\45\1\0\27\45"+
    "\1\0\37\45\1\0\1\45\1\0\4\45\2\0\7\45\1\0\47\45"+
    "\1\0\23\45\105\0\125\45\14\0\u026c\45\2\0\10\45\12\0\32\45"+
    "\5\0\113\45\3\0\3\45\17\0\15\45\1\0\4\45\16\0\22\45"+
    "\16\0\22\45\16\0\15\45\1\0\3\45\17\0\64\45\43\0\1\45"+
    "\3\0\2\45\103\0\130\45\10\0\51\45\127\0\35\45\63\0\36\45"+
    "\2\0\5\45\u038b\0\154\45\224\0\234\45\4\0\132\45\6\0\26\45"+
    "\2\0\6\45\2\0\46\45\2\0\6\45\2\0\10\45\1\0\1\45"+
    "\1\0\1\45\1\0\1\45\1\0\37\45\2\0\65\45\1\0\7\45"+
    "\1\0\1\45\3\0\3\45\1\0\7\45\3\0\4\45\2\0\6\45"+
    "\4\0\15\45\5\0\3\45\1\0\7\45\102\0\2\45\23\0\1\45"+
    "\34\0\1\45\15\0\1\45\40\0\22\45\120\0\1\45\4\0\1\45"+
    "\2\0\12\45\1\0\1\45\3\0\5\45\6\0\1\45\1\0\1\45"+
    "\1\0\1\45\1\0\4\45\1\0\3\45\1\0\7\45\3\0\3\45"+
    "\5\0\5\45\26\0\44\45\u0e81\0\3\45\31\0\11\45\7\0\5\45"+
    "\2\0\5\45\4\0\126\45\6\0\3\45\1\0\137\45\5\0\50\45"+
    "\4\0\136\45\21\0\30\45\70\0\20\45\u0200\0\u19b6\45\112\0\u51a6\45"+
    "\132\0\u048d\45\u0773\0\u2ba4\45\u215c\0\u012e\45\2\0\73\45\225\0\7\45"+
    "\14\0\5\45\5\0\1\45\1\0\12\45\1\0\15\45\1\0\5\45"+
    "\1\0\1\45\1\0\2\45\1\0\2\45\1\0\154\45\41\0\u016b\45"+
    "\22\0\100\45\2\0\66\45\50\0\15\45\66\0\2\45\30\0\3\45"+
    "\31\0\1\45\6\0\5\45\1\0\207\45\7\0\1\45\34\0\32\45"+
    "\4\0\1\45\1\0\32\45\12\0\132\45\3\0\6\45\2\0\6\45"+
    "\2\0\6\45\2\0\3\45\3\0\2\45\3\0\2\45\31\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\4\1\5"+
    "\1\4\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\1"+
    "\2\4\1\24\1\25\1\1\1\26\1\6\1\27\1\30"+
    "\1\31\1\4\1\32\1\33\1\34\1\5\1\35\3\0"+
    "\1\4\1\0\1\6\1\36\2\21\1\37\2\40\2\4"+
    "\1\0\1\41\1\42\1\0\1\6\1\43\1\0\1\43"+
    "\2\44\1\4\1\5\1\6\1\45\1\4\1\42\1\43"+
    "\1\0\1\4\1\5\1\46\1\44\1\47";

  private static int [] zzUnpackAction() {
    int [] result = new int[78];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\142\0\304\0\365\0\u0126"+
    "\0\u0157\0\u0188\0\304\0\142\0\142\0\142\0\142\0\142"+
    "\0\142\0\142\0\142\0\u01b9\0\142\0\u01ea\0\u021b\0\142"+
    "\0\u024c\0\u027d\0\u02ae\0\u02df\0\u0310\0\u0341\0\142\0\u0372"+
    "\0\142\0\142\0\142\0\u03a3\0\142\0\142\0\142\0\142"+
    "\0\142\0\u03d4\0\u0405\0\u0436\0\u0467\0\u0498\0\u04c9\0\142"+
    "\0\u04fa\0\142\0\142\0\142\0\u052b\0\u055c\0\u058d\0\u05be"+
    "\0\142\0\u05ef\0\u0620\0\142\0\u0651\0\u0682\0\u06b3\0\u06e4"+
    "\0\u0715\0\u0746\0\u0777\0\u03a3\0\304\0\u07a8\0\u07d9\0\142"+
    "\0\u080a\0\u083b\0\u086c\0\304\0\u080a\0\304";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[78];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\3\4\1\5\1\6\1\7\1\6\1\10\11\6"+
    "\1\11\1\6\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\6"+
    "\1\27\1\30\1\31\1\3\1\32\1\6\1\33\1\6"+
    "\1\34\1\6\1\35\1\6\1\36\2\6\5\37\17\40"+
    "\1\41\1\42\10\37\1\43\2\37\1\40\4\37\4\40"+
    "\1\37\1\40\1\37\4\40\62\0\3\4\62\0\17\6"+
    "\1\13\1\6\10\0\1\44\2\0\1\6\4\0\4\6"+
    "\1\0\1\6\1\0\1\6\1\0\2\6\6\0\1\7"+
    "\1\45\2\46\2\47\2\50\1\51\2\52\1\0\1\7"+
    "\1\0\1\53\1\54\40\0\17\6\1\13\1\6\10\0"+
    "\1\44\2\0\1\6\4\0\4\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\55\1\6\6\0\1\7\1\45\2\46"+
    "\2\47\2\50\1\51\2\52\1\0\1\7\1\56\1\53"+
    "\1\54\40\0\1\57\1\6\13\57\1\6\3\57\10\0"+
    "\1\44\2\0\1\57\4\0\4\57\1\0\1\57\1\0"+
    "\1\57\1\0\2\57\37\0\1\60\27\0\1\61\13\0"+
    "\1\61\16\0\1\62\62\0\1\63\15\0\1\64\2\0"+
    "\2\64\1\65\1\64\12\65\2\64\1\65\21\64\5\65"+
    "\1\64\1\65\3\64\2\65\5\0\7\6\1\66\7\6"+
    "\1\13\1\6\10\0\1\44\2\0\1\6\4\0\4\6"+
    "\1\0\1\6\1\0\1\6\1\0\2\6\5\0\17\6"+
    "\1\13\1\6\10\0\1\44\2\0\1\6\4\0\1\6"+
    "\1\67\2\6\1\0\1\6\1\0\1\6\1\0\2\6"+
    "\44\34\1\70\5\34\1\71\6\34\1\35\1\0\57\35"+
    "\5\0\1\72\1\0\13\72\1\0\3\72\13\0\1\72"+
    "\4\0\4\72\1\0\1\72\1\0\1\72\1\73\2\72"+
    "\5\0\17\40\12\0\1\43\2\0\1\40\4\0\4\40"+
    "\1\0\1\40\1\0\4\40\24\0\1\74\42\0\1\75"+
    "\12\0\1\76\1\75\44\0\1\77\13\0\1\77\44\0"+
    "\1\100\13\0\1\101\43\0\5\6\1\102\11\6\1\13"+
    "\1\6\10\0\1\44\2\0\1\6\4\0\4\6\1\0"+
    "\1\6\1\0\1\6\1\0\2\6\5\0\2\103\1\0"+
    "\2\103\4\0\3\103\1\0\1\103\34\0\1\103\6\0"+
    "\21\57\10\0\1\104\2\0\1\57\4\0\4\57\1\0"+
    "\1\57\1\0\1\57\1\0\2\57\6\0\1\61\13\0"+
    "\1\61\43\0\1\65\1\0\12\65\2\0\1\65\21\0"+
    "\5\65\1\0\1\65\3\0\2\65\5\0\5\6\1\105"+
    "\11\6\1\13\1\6\10\0\1\44\2\0\1\6\4\0"+
    "\4\6\1\0\1\6\1\0\1\6\1\0\2\6\5\0"+
    "\17\6\1\13\1\6\10\0\1\44\2\0\1\6\4\0"+
    "\4\6\1\0\1\106\1\0\1\6\1\0\2\6\2\34"+
    "\1\0\56\34\5\0\21\72\10\0\1\107\2\0\1\72"+
    "\4\0\4\72\1\0\1\72\1\0\1\72\1\73\2\72"+
    "\5\0\1\72\1\0\13\72\1\0\3\72\13\0\1\72"+
    "\4\0\4\72\1\0\1\72\1\0\1\72\1\0\2\72"+
    "\6\0\1\75\1\110\2\46\4\0\1\51\3\0\1\75"+
    "\44\0\1\75\13\0\1\75\44\0\1\77\1\110\2\46"+
    "\4\0\1\51\2\52\1\0\1\77\44\0\1\100\13\0"+
    "\1\100\44\0\1\100\13\0\1\100\1\111\42\0\17\6"+
    "\1\13\1\6\10\0\1\44\2\0\1\6\4\0\4\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\112\5\0"+
    "\2\103\1\45\2\103\2\47\2\50\1\103\2\113\1\0"+
    "\1\103\1\0\1\53\1\54\31\0\1\103\6\0\12\6"+
    "\1\114\4\6\1\13\1\6\10\0\1\44\2\0\1\6"+
    "\4\0\4\6\1\0\1\6\1\0\1\6\1\0\2\6"+
    "\56\0\1\73\7\0\2\115\1\0\2\115\4\0\3\115"+
    "\1\0\1\115\34\0\1\115\6\0\12\6\1\116\4\6"+
    "\1\13\1\6\10\0\1\44\2\0\1\6\4\0\4\6"+
    "\1\0\1\6\1\0\1\6\1\0\2\6\5\0\2\103"+
    "\1\45\2\103\2\47\2\50\1\103\2\113\1\76\1\103"+
    "\1\0\1\53\1\54\31\0\1\103\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2205];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\6\1\10\11\1\1\1\11"+
    "\2\1\1\11\6\1\1\11\1\1\3\11\1\1\5\11"+
    "\3\0\1\1\1\0\1\1\1\11\1\1\3\11\3\1"+
    "\1\0\1\11\1\1\1\0\1\11\1\1\1\0\11\1"+
    "\1\11\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[78];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

public ClojureSym symbol(IPersistentMap tokenType,Object data)
{
    ClojureSym.create(tokenType,yyline, yycolumn,yychar,data);
}

public ClojureSym symbol(IPersistentMap tokenType)
{
    ClojureSym.create(tokenType,yyline, yycolumn,yychar);
}

//From LispReader
static final clojure.lang.Symbol QUOTE = Symbol.create("quote");
static final clojure.lang.Symbol THE_VAR = Symbol.create("var");
static clojure.lang.Symbol UNQUOTE = Symbol.create("clojure.core", "unquote");
static clojure.lang.Symbol UNQUOTE_SPLICING = Symbol.create("clojure.core", "unquote-splicing");
static clojure.lang.Symbol CONCAT = Symbol.create("clojure.core", "concat");
static clojure.lang.Symbol SEQ = Symbol.create("clojure.core", "seq");
static clojure.lang.Symbol LIST = Symbol.create("clojure.core", "list");
static clojure.lang.Symbol APPLY = Symbol.create("clojure.core", "apply");
static clojure.lang.Symbol HASHMAP = Symbol.create("clojure.core", "hash-map");
static clojure.lang.Symbol HASHSET = Symbol.create("clojure.core", "hash-set");
static clojure.lang.Symbol VECTOR = Symbol.create("clojure.core", "vector");
static clojure.lang.Symbol WITH_META = Symbol.create("clojure.core", "with-meta");
static clojure.lang.Symbol META = Symbol.create("clojure.core", "meta");
static clojure.lang.Symbol DEREF = Symbol.create("clojure.core", "deref");

static IFn[] macros = new IFn[256];
static IFn[] dispatchMacros = new IFn[256];

static Pattern symbolPat = Pattern.compile("[:]?([\\D&&[^/]].*/)?([\\D&&[^/]][^/]*)");
static Pattern intPat =
		Pattern.compile(
				"([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+)|0[0-9]+)");
static Pattern ratioPat = Pattern.compile("([-+]?[0-9]+)/([0-9]+)");
static Pattern floatPat = Pattern.compile("([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?");
static final clojure.lang.Symbol SLASH = Symbol.create("/");
static final clojure.lang.Symbol CLOJURE_SLASH = Symbol.create("clojure.core","/");


//symbol->gensymbol
static clojure.lang.Var GENSYM_ENV = clojure.lang.Var.create(null);
//sorted-map num->gensymbol
static clojure.lang.Var ARG_ENV = clojure.lang.Var.create(null);

/*
    static
	{
	macros['"'] = new LispReader.StringReader();
	macros[';'] = new LispReader.CommentReader();
	macros['\''] = new LispReader.WrappingReader(QUOTE);
	macros['@'] = new LispReader.WrappingReader(DEREF);//new DerefReader();
	macros['^'] = new LispReader.WrappingReader(META);
	macros['`'] = new LispReader.SyntaxQuoteReader();
	macros['~'] = new LispReader.UnquoteReader();
	macros['('] = new LispReader.ListReader();
	macros[')'] = new LispReader.UnmatchedDelimiterReader();
	macros['['] = new LispReader.VectorReader();
	macros[']'] = new LispReader.UnmatchedDelimiterReader();
	macros['{'] = new LispReader.MapReader();
	macros['}'] = new LispReader.UnmatchedDelimiterReader();
	macros['\\'] = new LispReader.CharacterReader();
	macros['%'] = new LispReader.ArgReader();
	macros['#'] = new LispReader.DispatchReader();


	dispatchMacros['^'] = new LispReader.MetaReader();
	dispatchMacros['\''] = new LispReader.VarReader();
	dispatchMacros['"'] = new LispReader.RegexReader();
	dispatchMacros['('] = new LispReader.FnReader();
	dispatchMacros['{'] = new LispReader.SetReader();
	dispatchMacros['='] = new LispReader.EvalReader();
	dispatchMacros['!'] = new LispReader.CommentReader();
	dispatchMacros['<'] = new LispReader.UnreadableReader();
	dispatchMacros['_'] = new LispReader.DiscardReader();
	}
*/
	final static IPersistentMap cSTRING_LITERAL = (IPersistentMap)RT.var("org.enclojure.ide.tokens","cSTRING-LITERAL").get();
	final static IPersistentMap cWRONG_STRING_LITERAL = (IPersistentMap)RT.var("org.enclojure.ide.tokens","cWRONG-STRING-LITERAL").get();
	final static IPersistentMap cLONG_LITERAL = (IPersistentMap)RT.var("org.enclojure.ide.tokens","cLONG-LITERAL").get();
	final static IPersistentMap cWHITESPACE = (IPersistentMap)RT.var("org.enclojure.ide.tokens","cWHITESPACE").get();
	final static IPersistentMap cLINE_COMMENT = (IPersistentMap)RT.var("org.enclojure.ide.tokens","cLINE-COMMENT").get();
	final static IPersistentMap cCOLON_SYMBOL = (IPersistentMap)RT.var("org.enclojure.ide.tokens","cCOLON-SYMBOL").get();
	final static IPersistentMap cSHARPUP = (IPersistentMap)RT.var("org.enclojure.ide.tokens","cSHARPUP").get();
	final static IPersistentMap cRIGHT_SQUARE = (IPersistentMap)RT.var("org.enclojure.ide.tokens","cRIGHT-SQUARE").get();
	final static IPersistentMap get_java_def = (IPersistentMap)RT.var("org.enclojure.ide.tokens","get-java-def").get();
	final static IPersistentMap cTRUE = (IPersistentMap)RT.var("org.enclojure.ide.tokens","cTRUE").get();
	final static IPersistentMap _token_meta_ = (IPersistentMap)RT.var("org.enclojure.ide.tokens","-token-meta-").get();
	final static IPersistentMap cTILDAAT = (IPersistentMap)RT.var("org.enclojure.ide.tokens","cTILDAAT").get();
	final static IPersistentMap cEOF = (IPersistentMap)RT.var("org.enclojure.ide.tokens","cEOF").get();
	final static IPersistentMap symATOM = (IPersistentMap)RT.var("org.enclojure.ide.tokens","symATOM").get();
	final static IPersistentMap cRIGHT_PAREN = (IPersistentMap)RT.var("org.enclojure.ide.tokens","cRIGHT-PAREN").get();
	final static IPersistentMap cBIG_DECIMAL_LITERAL = (IPersistentMap)RT.var("org.enclojure.ide.tokens","cBIG-DECIMAL-LITERAL").get();
	final static IPersistentMap cNIL = (IPersistentMap)RT.var("org.enclojure.ide.tokens","cNIL").get();
	final static IPersistentMap cWHITESPACE_SET = (IPersistentMap)RT.var("org.enclojure.ide.tokens","cWHITESPACE-SET").get();
	final static IPersistentMap symIMPLICIT_ARG = (IPersistentMap)RT.var("org.enclojure.ide.tokens","symIMPLICIT-ARG").get();
	final static IPersistentMap cFLOAT_LITERAL = (IPersistentMap)RT.var("org.enclojure.ide.tokens","cFLOAT-LITERAL").get();
	final static IPersistentMap cCHAR_LITERAL = (IPersistentMap)RT.var("org.enclojure.ide.tokens","cCHAR-LITERAL").get();
	final static IPersistentMap cLEFT_PAREN = (IPersistentMap)RT.var("org.enclojure.ide.tokens","cLEFT-PAREN").get();
	final static IPersistentMap cSHARP = (IPersistentMap)RT.var("org.enclojure.ide.tokens","cSHARP").get();
	final static IPersistentMap cDOUBLE_LITERAL = (IPersistentMap)RT.var("org.enclojure.ide.tokens","cDOUBLE-LITERAL").get();
	final static IPersistentMap cBIG_INT_LITERAL = (IPersistentMap)RT.var("org.enclojure.ide.tokens","cBIG-INT-LITERAL").get();
	final static IPersistentMap cLEFT_SQUARE = (IPersistentMap)RT.var("org.enclojure.ide.tokens","cLEFT-SQUARE").get();
	final static IPersistentMap cLEFT_CURLY = (IPersistentMap)RT.var("org.enclojure.ide.tokens","cLEFT-CURLY").get();
	final static IPersistentMap cTILDA = (IPersistentMap)RT.var("org.enclojure.ide.tokens","cTILDA").get();
	final static IPersistentMap cREADABLE_TEXT = (IPersistentMap)RT.var("org.enclojure.ide.tokens","cREADABLE-TEXT").get();
	final static IPersistentMap symNS_SEP = (IPersistentMap)RT.var("org.enclojure.ide.tokens","symNS-SEP").get();
	final static IPersistentMap make_token = (IPersistentMap)RT.var("org.enclojure.ide.tokens","make-token").get();
	final static IPersistentMap cQUOTE = (IPersistentMap)RT.var("org.enclojure.ide.tokens","cQUOTE").get();
	final static IPersistentMap cUP = (IPersistentMap)RT.var("org.enclojure.ide.tokens","cUP").get();
	final static IPersistentMap cRIGHT_CURLY = (IPersistentMap)RT.var("org.enclojure.ide.tokens","cRIGHT-CURLY").get();
	final static IPersistentMap cCOMMA = (IPersistentMap)RT.var("org.enclojure.ide.tokens","cCOMMA").get();
	final static IPersistentMap symS = (IPersistentMap)RT.var("org.enclojure.ide.tokens","symS").get();
	final static IPersistentMap cAT = (IPersistentMap)RT.var("org.enclojure.ide.tokens","cAT").get();
	final static IPersistentMap cCOMMENTS = (IPersistentMap)RT.var("org.enclojure.ide.tokens","cCOMMENTS").get();
	final static IPersistentMap cFALSE = (IPersistentMap)RT.var("org.enclojure.ide.tokens","cFALSE").get();
	final static IPersistentMap make_token_set = (IPersistentMap)RT.var("org.enclojure.ide.tokens","make-token-set").get();
	final static IPersistentMap cRATIO = (IPersistentMap)RT.var("org.enclojure.ide.tokens","cRATIO").get();
	final static IPersistentMap symDOT = (IPersistentMap)RT.var("org.enclojure.ide.tokens","symDOT").get();
	final static IPersistentMap _TOKEN_TYPES_MAP_ = (IPersistentMap)RT.var("org.enclojure.ide.tokens","-TOKEN-TYPES-MAP-").get();
	final static IPersistentMap _TOKEN_TYPES_BY_ID_ = (IPersistentMap)RT.var("org.enclojure.ide.tokens","-TOKEN-TYPES-BY-ID-").get();
	final static IPersistentMap cSEPARATORS = (IPersistentMap)RT.var("org.enclojure.ide.tokens","cSEPARATORS").get();
	final static IPersistentMap cINTEGER_LITERAL = (IPersistentMap)RT.var("org.enclojure.ide.tokens","cINTEGER-LITERAL").get();
	final static IPersistentMap cIDENTIFIERS = (IPersistentMap)RT.var("org.enclojure.ide.tokens","cIDENTIFIERS").get();
	final static IPersistentMap cLITERALS = (IPersistentMap)RT.var("org.enclojure.ide.tokens","cLITERALS").get();
	final static IPersistentMap cBOOLEAN_LITERAL = (IPersistentMap)RT.var("org.enclojure.ide.tokens","cBOOLEAN-LITERAL").get();
	final static IPersistentMap cBAD_CHARACTER = (IPersistentMap)RT.var("org.enclojure.ide.tokens","cBAD-CHARACTER").get();
	final static IPersistentMap cEOL = (IPersistentMap)RT.var("org.enclojure.ide.tokens","cEOL").get();
	final static IPersistentMap cBACKQUOTE = (IPersistentMap)RT.var("org.enclojure.ide.tokens","cBACKQUOTE").get();
	final static IPersistentMap cSTRINGS = (IPersistentMap)RT.var("org.enclojure.ide.tokens","cSTRINGS").get();
	final static IPersistentMap cATOMS = (IPersistentMap)RT.var("org.enclojure.ide.tokens","cATOMS").get();



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _ClojureLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _ClojureLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1318) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public ClojureSym next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 14: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [360] { return symbol(cBACKQUOTE); }");
          { return symbol(cBACKQUOTE);
          }
        case 40: break;
        case 31: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [367] { return symbol(cTILDAAT); }");
          { return symbol(cTILDAAT);
          }
        case 41: break;
        case 36: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [350] { return symbol(cRATIO); }");
          { return symbol(cRATIO);
          }
        case 42: break;
        case 24: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [323] { return symbol(symNS_SEP); }");
          { return symbol(symNS_SEP);
          }
        case 43: break;
        case 32: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [339] { return symbol(cCHAR_LITERAL); }");
          { return symbol(cCHAR_LITERAL);
          }
        case 44: break;
        case 11: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [374] { return symbol(cLEFT_CURLY); }");
          { return symbol(cLEFT_CURLY);
          }
        case 45: break;
        case 25: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [325] { yybegin(YYINITIAL); return symbol(symATOM); }");
          { yybegin(YYINITIAL); return symbol(symATOM);
          }
        case 46: break;
        case 9: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [372] { return symbol(cLEFT_SQUARE); }");
          { return symbol(cLEFT_SQUARE);
          }
        case 47: break;
        case 34: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [356] { return symbol(cCOLON_SYMBOL); }");
          { return symbol(cCOLON_SYMBOL);
          }
        case 48: break;
        case 7: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [370] { return symbol(cLEFT_PAREN); }");
          { return symbol(cLEFT_PAREN);
          }
        case 49: break;
        case 26: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [346] { return symbol(cBIG_INT_LITERAL); }");
          { return symbol(cBIG_INT_LITERAL);
          }
        case 50: break;
        case 6: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [353] { return symbol(symATOM); }");
          { return symbol(symATOM);
          }
        case 51: break;
        case 12: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [375] { return symbol(cRIGHT_CURLY); }");
          { return symbol(cRIGHT_CURLY);
          }
        case 52: break;
        case 38: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [341] { return symbol(cTRUE); }");
          { return symbol(cTRUE);
          }
        case 53: break;
        case 37: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [340] { return symbol(cNIL); }");
          { return symbol(cNIL);
          }
        case 54: break;
        case 30: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [361] { return symbol(cSHARPUP); }");
          { return symbol(cSHARPUP);
          }
        case 55: break;
        case 22: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [326] { yypushback(yytext().length()); yybegin(YYINITIAL); }");
          { yypushback(yytext().length()); yybegin(YYINITIAL);
          }
        case 56: break;
        case 21: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [331] { return symbol(cLINE_COMMENT); }");
          { return symbol(cLINE_COMMENT);
          }
        case 57: break;
        case 8: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [371] { return symbol(cRIGHT_PAREN); }");
          { return symbol(cRIGHT_PAREN);
          }
        case 58: break;
        case 23: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [322] { return symbol(symDOT); }");
          { return symbol(symDOT);
          }
        case 59: break;
        case 5: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [344] { return symbol(cINTEGER_LITERAL); }");
          { return symbol(cINTEGER_LITERAL);
          }
        case 60: break;
        case 13: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [359] { return symbol(cQUOTE); }");
          { return symbol(cQUOTE);
          }
        case 61: break;
        case 3: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [334] { return symbol(cCOMMA); }");
          { return symbol(cCOMMA);
          }
        case 62: break;
        case 15: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [362] { return symbol(cSHARP); }");
          { return symbol(cSHARP);
          }
        case 63: break;
        case 39: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [342] { return symbol(cFALSE); }");
          { return symbol(cFALSE);
          }
        case 64: break;
        case 27: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [347] { return symbol(cFLOAT_LITERAL); }");
          { return symbol(cFLOAT_LITERAL);
          }
        case 65: break;
        case 29: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [348] { return symbol(cDOUBLE_LITERAL); }");
          { return symbol(cDOUBLE_LITERAL);
          }
        case 66: break;
        case 16: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [363] { return symbol(cUP); }");
          { return symbol(cUP);
          }
        case 67: break;
        case 1: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [381] { return symbol(cBAD_CHARACTER); }");
          { return symbol(cBAD_CHARACTER);
          }
        case 68: break;
        case 2: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [333] { return symbol(cWHITESPACE); }");
          { return symbol(cWHITESPACE);
          }
        case 69: break;
        case 33: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [336] { return symbol(cSTRING_LITERAL); }");
          { return symbol(cSTRING_LITERAL);
          }
        case 70: break;
        case 20: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [337] { return symbol(cWRONG_STRING_LITERAL); }");
          { return symbol(cWRONG_STRING_LITERAL);
          }
        case 71: break;
        case 28: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [345] { return symbol(cLONG_LITERAL); }");
          { return symbol(cLONG_LITERAL);
          }
        case 72: break;
        case 17: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [364] { return symbol(symIMPLICIT_ARG); }");
          { return symbol(symIMPLICIT_ARG);
          }
        case 73: break;
        case 10: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [373] { return symbol(cRIGHT_SQUARE); }");
          { return symbol(cRIGHT_SQUARE);
          }
        case 74: break;
        case 35: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [349] { return symbol(cBIG_DECIMAL_LITERAL); }");
          { return symbol(cBIG_DECIMAL_LITERAL);
          }
        case 75: break;
        case 19: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [366] { return symbol(cAT); }");
          { return symbol(cAT);
          }
        case 76: break;
        case 4: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [355] { yypushback(yytext().length()); yybegin(SYMBOL); }");
          { yypushback(yytext().length()); yybegin(SYMBOL);
          }
        case 77: break;
        case 18: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [365] { return symbol(cTILDA); }");
          { return symbol(cTILDA);
          }
        case 78: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java _ClojureLexer <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        _ClojureLexer scanner = null;
        try {
          scanner = new _ClojureLexer( new java.io.FileReader(argv[i]) );
          do {
            System.out.println(scanner.next_token());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
