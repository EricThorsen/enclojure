<?xml version="1.0" encoding="UTF-8"?>
<project name="common" xmlns:ivy="antlib:org.apache.ivy.ant">

<!--
################################################################################
  properties
################################################################################
-->
    <property file="build.properties"/>

    <property name="build-script" value="${classes.dir}${file.separator}__build__.clj" />
    <property name="build-script-class" value="${classes.dir}${file.separator}__build____init.class" />
    <property name="test-script" value="${test.build.dir}${file.separator}__test__.clj" />

<!--
################################################################################
      target: load-ivy
        this target is not necessary if you put ivy.jar in your ant lib directory
        if you already have ivy 2.0 in your ant lib, you can simply remove this
        target
################################################################################
-->
    <target name="load-ivy">
    	<!-- try to load ivy here from home ivy dir, in case the user has not already dropped
    	      it into ant's lib dir (note that the latter copy will always take precedence).
    	      We will not fail as long as ivy home lib dir exists (it may be empty) and
    	      ivy is in at least one of ant's lib dir or the ivy home lib dir. -->
        <mkdir dir="${ivy.jar.dir}" />
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml"
    	         uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>

    <path id="lib.path.id">
        <fileset dir="${lib.dir}" />
    </path>

    <path id="run.path.id">
        <path refid="lib.path.id" />
        <path location="${classes.dir}" />
    </path>
    
    <!-- <ivy:settings file="${common.dir}${file.separator}ivysettings.xml" /> -->
    <property name="ivy.shared.default.root" value="${repository.dir}${file.separator}shared"/>


<!--
################################################################################
  resolve tasks
################################################################################
-->
    <target name="resolve" description="build and retrieve dependencies with ivy">
        <ivy:configure file="ivysettings.xml" />
        <ivy:retrieve />
        <ivy:resolve />
    </target>

<!--
################################################################################
  report tasks
################################################################################
-->
    <target name="report" depends="resolve" description="generates a report of dependencies">
        <ivy:report todir="${build.dir}"/>
    </target>

<!--
################################################################################
  init tasks
################################################################################
-->
    <target name="init" depends="init-dirs, init-props, load-ivy,copy-resource-files" />

    <target name="init-dirs">
        <mkdir dir="${classes.dir}" />
        <mkdir dir="${dist.dir}" />
        <mkdir dir="${lib.dir}" />
        <mkdir dir="${test.build.dir}" />
    </target>

    <target name="init-props">
        <available file="${src.dir}" type="dir" property="java.files.present"/>
    </target>

    <target name="init-project-props" depends="resolve">
        <!-- <delete file="${private.properties}" /> -->

        <fileset id="project-jarfiles" dir="${lib.dir}" includes="**/*.jar"/>
        <pathconvert pathsep=":" property="jarfiles" refid="project-jarfiles"/>
<!-- ET not sure what this is for????
        <propertyfile file="${project.properties}">
            <entry key="javac.classpath" value="${jarfiles}" />
        </propertyfile>
-->
    </target>
  	
	<target name="copy-resource-files">
      <copy todir="${classes.dir}">
        <fileset dir="${src.dir}" includes="**/*.png"/>
       	<fileset dir="${src.dir}" includes="**/*.gif"/>
       	<fileset dir="${src.dir}" includes="**/*.xml"/>
       	<fileset dir="${src.dir}" includes="**/*.tiff"/>
     	<fileset dir="${src.dir}" includes="**/*.zip"/>  
   </copy>
    </target>
    
<!--
################################################################################
  compile tasks
################################################################################
-->
    <target name="compile" depends="init, resolve, init-project-props, compile-java, compile-clojure" />

    <target name="compile-java" depends="init">
        <path id="compile-jarfiles">
            <fileset dir="${lib.dir}" includes="**/*.jar"/>
        </path>
        <javac srcdir="${src.dir}"
               destdir="${classes.dir}"
               includeJavaRuntime="yes"
               debug="true"
               target="1.5">
            <classpath refid="compile-jarfiles"/>
        </javac>
    </target>

    <target name="copy-clojure-files">
      <copy todir="${classes.dir}">
        <fileset dir="${src.dir}" includes="**/*.clj"/>
     </copy>
    </target>

    <target name="copy-properties-files">
      <copy todir="${classes.dir}">
        <fileset dir="${src.dir}" includes="**/*.properties"/>
      </copy>
    </target>

    <target name="create-build-script" depends="init">
        <fileset dir="${src.dir}" id="project-cljfiles">
            <include name="**/*.clj"/>
        </fileset>
        <pathconvert pathsep=":" property="cljfiles" refid="project-cljfiles"/>
       <!-- <delete file="${build-script}" /> -->
        <echo>${cljfiles}</echo>
        <echo file="${build-script}">
            (ns --build--
              !!${cljfiles}##
            )
        </echo>

        <replace file="${build-script}" token="${src.dir}${file.separator}" value="" summary="yes"/>
    	<replace file="${build-script}" token="${file.separator}" value="/" summary="yes"/>
        <replace file="${build-script}" token=":" value="&#34;)&#13;&#10;(:load &#34;" summary="yes" />
        <replace file="${build-script}" token="!!" value="(:load &#34;" summary="yes" />
        <replace file="${build-script}" token="##" value="&#34;)" summary="yes" />
        <!-- <replace file="${build-script}" token="_" value="-" summary="yes" />  -->
        <replace file="${build-script}" token=".clj" value="" summary="yes" />
        <replace file="${build-script}" token=".>" value="/>" summary="yes" />
    </target>

    <target name="compile-clojure" depends="init, copy-clojure-files, copy-properties-files, create-build-script" unless="clojure-no-aot">
        <java failonerror="true" classname="clojure.lang.Compile">
          <classpath>
              <path location="${classes.dir}"/>
              <path location="${src.dir}"/>
              <fileset dir="${lib.dir}" includes="**/*.jar"/>
          </classpath>
          <sysproperty key="clojure.compile.path" value="${classes.dir}"/>
          <arg value="--build--"/>
        </java>

        <delete file="${build-script}" />
        <delete file="${build-script-class}" /> 
    </target>

<!--
################################################################################
  run tasks
################################################################################
-->
    <target name="run" depends="version, compile, do-run" description="compile and run the project" />

    <target name="do-run">
        <java failonerror="true" classname="${main.class.name}">
          <classpath>
              <path location="${classes.dir}"/>
              <fileset dir="${lib.dir}" includes="**/*.jar"/>
          </classpath>
        </java>
    </target>

<!--
################################################################################
  version tasks
################################################################################
-->
    <target name="version" depends="ivy-new-version">
    	<!-- create version file in classpath for later inclusion in jar -->
        <mkdir dir="${classes.dir}"/>
        <echo message="version=${ivy.new.revision}" file="${classes.dir}/${ant.project.name}.properties" append="false" />

		<!-- load generated version properties file -->
        <property file="${classes.dir}${file.separator}${ant.project.name}.properties" />
    </target>
    
    <target name="ivy-new-version" depends="load-ivy" unless="ivy.new.revision">
    	<!-- default module version prefix value -->
        <property name="module.version.prefix" value="${module.version.target}-dev-b" />
		
    	<!-- asks to ivy an available version number -->
        <ivy:info file="${ivy.file}" />
        <ivy:buildnumber
    		organisation="${ivy.organisation}" module="${ivy.module}" 
    		revision="${module.version.prefix}" defaultBuildNumber="1" revSep=""/>
    </target>

    <target name="local-version">
        <tstamp>
            <format property="now" pattern="yyyyMMddHHmmss"/>
        </tstamp>
        <property name="ivy.new.revision" value="${module.version.target}-local-${now}"/>
    </target>

<!--
################################################################################
  jar tasks
################################################################################
-->
    <target name="jar" depends="init, resolve, compile, make-jar" />

    <target name="make-jar">
        <jar destfile="${jar.file}" basedir="${classes.dir}" includes="**/*" >
            <!-- <fileset dir="${classes.dir}" includes="**/*" /> -->
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <!-- <attribute name="Build-Version" value="${version}" /> -->
                <attribute name="Class-Path" value="."/>
            </manifest>
        </jar>
    </target>

    <target name="buildlist" depends="load-ivy">
        <ivy:buildlist reference="build-path" root="${ant.project.name}" ivyfilepath="ivy.xml">
            <fileset dir="${projects.dir}" includes="**/build.xml"/>
        </ivy:buildlist>
    </target>

    <target name="build-deps" depends="buildlist"
  			description="compile, jar and publish all projects in the right order">
        <subant target="jar" buildpathref="build-path" failonerror="true" />
    </target>

<!--
################################################################################
  publish tasks
################################################################################
-->
    <target name="publish" depends="clean-build, jar" description="publish this project in the ivy repository">
        <ivy:publish artifactspattern="${dist.dir}${file.separator}[organisation][module].[ext]"
    			           resolver="shared"
    			           pubrevision="${version}" 
    			           status="release"
    	/>
        <echo message="project ${ant.project.name} released with version ${version}" />
    </target>

    <!-- ================================= 
          target: publish-local              
         ================================= -->
    <target name="publish-local" description="publish this project in the local ivy repository">
        <ivy:publish artifactspattern="${dist.dir}${file.separator}[artifact].[ext]"
    			        resolver="local"
    			        status="integration"
    					forcedeliver="true"
    	/>
        <echo message="project ${ant.project.name} published locally with version ${version}" />
    </target>

<!--
################################################################################
  clean tasks
################################################################################
-->
    <target name="clean" depends="clean-ivy-cache, clean-dist, clean-build, clean-lib" description="clean the project" /> 
    <!-- <target name="clean" depends="clean-dist, clean-build, clean-lib" description="clean the project" /> -->

    <target name="clean-local" depends="load-ivy" description="cleans the local repository for the current module">
        <ivy:info file="${ivy.file}" />
        <delete dir="${ivy.local.default.root}${file.separator}${ivy.organisation}${file.separator}${ivy.module}"/>
    </target>

    <target name="clean-ivy-cache" description="clear repo cache with ivy">
        <delete dir="${ivy.cache.common.dir}" />
        <delete dir="${ivy.cache.dir}" />
    </target>

    <target name="clean-lib" description="clean the project libraries directory (dependencies)">
        <delete includeemptydirs="true" dir="${lib.dir}"/>
    </target>

    <target name="clean-build" description="clean the project built files">
        <delete includeemptydirs="true" dir="${build.dir}"/>
    </target>

    <target name="clean-dist" description="clear repo cache with ivy">
        <delete includeemptydirs="true" dir="${dist.dir}" />
    </target>

<!--
################################################################################
  debug tasks
################################################################################
-->
    <target name="debug" depends="compile, nb-debug" />

    <target name="nb-debug">
        <path id="dbg-classpath">
            <pathelement location="${classes.dir}" />
            <pathelement location="${lib.dir}" />
            <pathelement location="${src.dir}" />
        </path>

        <nbjpdastart transport="dt_socket" addressproperty="jpda.address" name="${ant.project.name}">
            <sourcepath path="${src.dir}"/>
            <classpath refid="dbg-classpath" />
        </nbjpdastart>

        <java classname="${main.class.name}" fork="true" failonerror="true">
          <classpath refid="dbg-classpath" />
          <jvmarg value="-Xdebug" />
          <jvmarg value="-Xnoagent" />
          <jvmarg value="-Djava.compiler=none"/>
          <jvmarg value="-Xrunjdwp:transport=dt_socket,address=${jpda.address}" />
        </java>
    </target>

<!--
################################################################################
  test tasks
################################################################################
-->
    <target name="test" depends="init, do-test" />

    <target name="create-test-script" depends="init">
        <fileset dir="${test.dir}" id="test-cljfiles">
            <include name="**/*_test.clj"/>
        </fileset>
        <pathconvert pathsep=":" property="tcljfiles" refid="test-cljfiles"/>

        <delete file="${test.dir}" />

        <echo file="${test-script}">
(ns --test--
  !!${tcljfiles}##)
        </echo>

        <replace file="${test-script}" token=":" value="])&#13;&#10;(^require [" summary="yes" />
        <replace file="${test-script}" token="!!" value="(^require [clojure.contrib.test-is ^as test-is]) &#13;&#10; (^require [" summary="yes" />
        <replace file="${test-script}" token="##" value="])" summary="yes" />
        <replace file="${test-script}" token="${basedir}${file.separator}" value="" summary="yes" />
        <replace file="${test-script}" token="test${file.separator}" value="" summary="yes" />
        <replace file="${test-script}" token="_" value="-" summary="yes" />
        <replace file="${test-script}" token=".clj" value="" summary="yes" />
        <replace file="${test-script}" token="${file.separator}" value="." summary="yes"/>
        <replace file="${test-script}" token=".>" value="/>" summary="yes" />

        <echo file="${test-script}" append="true">
(def *failure?* (ref false))

(defmethod test-is^report ^fail [m]
  (test-is^with-test-out
   (test-is^inc-report-counter ^fail)
   (println "^nFAIL in" (test-is^testing-vars-str))
   (when (seq test-is^*testing-contexts*) (println (test-is^testing-contexts-str)))
   (when-let [message (^message m)] (println message))
   (println "expected^" (pr-str (^expected m)))
   (println "  actual^" (pr-str (^actual m))))
  (dosync (ref-set *failure?* true)))

(defn run-tests [namespaces]
  (apply test-is^run-tests namespaces)
  (when @*failure?*
    (System^exit 1)))
        </echo>
        
        <echo file="${test-script}" append="true">

(run-tests [
!!${tcljfiles}##
])
        </echo>

        <replace file="${test-script}" token=":" value=" &#13;&#10; '" summary="yes" />
        <replace file="${test-script}" token="!!" value="'" summary="yes" />
        <replace file="${test-script}" token="##" value="" summary="yes" />
        <replace file="${test-script}" token="${basedir}${file.separator}" value="" summary="yes" />
        <replace file="${test-script}" token="test${file.separator}" value="" summary="yes" />
        <replace file="${test-script}" token="_" value="-" summary="yes" />
        <replace file="${test-script}" token=".clj" value="" summary="yes" />
        <replace file="${test-script}" token="${file.separator}" value="." summary="yes"/>
        <replace file="${test-script}" token=".>" value="/>" summary="yes" />
        <replace file="${test-script}" token="^" value=":" summary="yes" />

        <replace file="${test-script}" token="test-is:report" value="test-is/report" summary="yes" />
        <replace file="${test-script}" token="test-is:with-test-out" value="test-is/with-test-out" summary="yes" />
        <replace file="${test-script}" token="test-is:inc-report-counter" value="test-is/inc-report-counter" summary="yes" />
        <replace file="${test-script}" token=":nFAIL" value="\nFAIL" summary="yes" />
        <replace file="${test-script}" token="test-is:*testing-contexts*" value="test-is/*testing-contexts*" summary="yes" />
        <replace file="${test-script}" token="test-is:run-tests" value="test-is/run-tests" summary="yes" />
        <replace file="${test-script}" token="test-is:testing-vars-str" value="test-is/testing-vars-str" summary="yes" />
        <replace file="${test-script}" token="test-is:testing-contexts-str" value="test-is/testing-contexts-str" summary="yes" />
        <replace file="${test-script}" token="System:exit" value="System/exit" summary="yes" />
    </target>

    <target name="do-test" description="Test" depends="jar, create-test-script">
        <java fork="true"
                 classname="clojure.lang.Script"
                 failonerror="true"
                 resultproperty="resultcode">
            <classpath>
                <path location="${classes.dir}"/>
                <path location="${src.dir}"/>
                <path location="${test.dir}"/>
                <fileset dir="${lib.dir}" includes="**/*.jar"/>
            </classpath>

            <arg value="${test-script}"/>

            <assertions>
                <enable/>
            </assertions>

        </java>
    </target>
</project>
